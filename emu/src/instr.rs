/*
* This file is automatically generated by the codegen module.
* Do not edit this file manually.
*/

use crate::alu;
use crate::cpu::Cpu;
use crate::mmu::Mmu;

#[allow(unused_variables)]
fn op_0x0000(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    (4, 1)
}

#[allow(unused_variables)]
fn op_0x0001(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = mmu.get16(cpu.get_pc().wrapping_add(arg));
    cpu.set_bc(v);

    (12, 3)
}

#[allow(unused_variables)]
fn op_0x0002(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = cpu.get_a();
    mmu.set8(cpu.get_bc(), v);

    (8, 1)
}

#[allow(unused_variables)]
fn op_0x0003(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = cpu.get_bc().wrapping_add(1);
    cpu.set_bc(v);

    (8, 1)
}

#[allow(unused_variables)]
fn op_0x0004(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = cpu.get_b();
    let (v, h, c, z) = alu::add8(v, 1, false);
    cpu.set_b(v);
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(h);

    (4, 1)
}

#[allow(unused_variables)]
fn op_0x0005(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = cpu.get_b();
    let (v, h, c, z) = alu::sub8(v, 1, false);
    cpu.set_b(v);
    cpu.set_zf(z);
    cpu.set_nf(true);
    cpu.set_hf(h);

    (4, 1)
}

#[allow(unused_variables)]
fn op_0x0006(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = mmu.get8(cpu.get_pc().wrapping_add(arg));
    cpu.set_b(v);

    (8, 2)
}

#[allow(unused_variables)]
fn op_0x0007(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = cpu.get_a();
    let c = v & 0x80 != 0;
    let v = v.rotate_left(1);
    let z = v == 0;
    cpu.set_a(v);
    cpu.set_zf(false);
    cpu.set_nf(false);
    cpu.set_hf(false);
    cpu.set_cf(c);

    (4, 1)
}

#[allow(unused_variables)]
fn op_0x0008(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = cpu.get_sp();
    mmu.set16(mmu.get16(cpu.get_pc().wrapping_add(arg)), v);

    (20, 3)
}

#[allow(unused_variables)]
fn op_0x0009(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = cpu.get_hl();
    let q = cpu.get_bc();
    let (v, h, c, z) = alu::add16(p, q, false);
    cpu.set_hl(v);

    cpu.set_nf(false);
    cpu.set_hf(h);
    cpu.set_cf(c);

    (8, 1)
}

#[allow(unused_variables)]
fn op_0x000a(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = mmu.get8(cpu.get_bc());
    cpu.set_a(v);

    (8, 1)
}

#[allow(unused_variables)]
fn op_0x000b(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = cpu.get_bc().wrapping_sub(1);
    cpu.set_bc(v);

    (8, 1)
}

#[allow(unused_variables)]
fn op_0x000c(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = cpu.get_c();
    let (v, h, c, z) = alu::add8(v, 1, false);
    cpu.set_c(v);
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(h);

    (4, 1)
}

#[allow(unused_variables)]
fn op_0x000d(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = cpu.get_c();
    let (v, h, c, z) = alu::sub8(v, 1, false);
    cpu.set_c(v);
    cpu.set_zf(z);
    cpu.set_nf(true);
    cpu.set_hf(h);

    (4, 1)
}

#[allow(unused_variables)]
fn op_0x000e(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = mmu.get8(cpu.get_pc().wrapping_add(arg));
    cpu.set_c(v);

    (8, 2)
}

#[allow(unused_variables)]
fn op_0x000f(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = cpu.get_a();
    let c = v & 1 != 0;
    let v = v.rotate_right(1);
    let z = v == 0;
    cpu.set_a(v);
    cpu.set_zf(false);
    cpu.set_nf(false);
    cpu.set_hf(false);
    cpu.set_cf(c);

    (4, 1)
}

#[allow(unused_variables)]
fn op_0x0010(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    cpu.stop();

    (4, 2)
}

#[allow(unused_variables)]
fn op_0x0011(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = mmu.get16(cpu.get_pc().wrapping_add(arg));
    cpu.set_de(v);

    (12, 3)
}

#[allow(unused_variables)]
fn op_0x0012(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = cpu.get_a();
    mmu.set8(cpu.get_de(), v);

    (8, 1)
}

#[allow(unused_variables)]
fn op_0x0013(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = cpu.get_de().wrapping_add(1);
    cpu.set_de(v);

    (8, 1)
}

#[allow(unused_variables)]
fn op_0x0014(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = cpu.get_d();
    let (v, h, c, z) = alu::add8(v, 1, false);
    cpu.set_d(v);
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(h);

    (4, 1)
}

#[allow(unused_variables)]
fn op_0x0015(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = cpu.get_d();
    let (v, h, c, z) = alu::sub8(v, 1, false);
    cpu.set_d(v);
    cpu.set_zf(z);
    cpu.set_nf(true);
    cpu.set_hf(h);

    (4, 1)
}

#[allow(unused_variables)]
fn op_0x0016(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = mmu.get8(cpu.get_pc().wrapping_add(arg));
    cpu.set_d(v);

    (8, 2)
}

#[allow(unused_variables)]
fn op_0x0017(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = cpu.get_a();
    let c = v & 0x80 != 0;
    let v = v.wrapping_shl(1);
    let v = v | if cpu.get_cf() { 1 } else { 0 };
    cpu.set_a(v);
    cpu.set_zf(false);
    cpu.set_nf(false);
    cpu.set_hf(false);
    cpu.set_cf(c);

    (4, 1)
}

#[allow(unused_variables)]
fn op_0x0018(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = mmu.get8(cpu.get_pc().wrapping_add(arg));
    let pc = cpu.get_pc().wrapping_add(alu::signed(p));
    cpu.set_pc(pc);

    (12, 2)
}

#[allow(unused_variables)]
fn op_0x0019(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = cpu.get_hl();
    let q = cpu.get_de();
    let (v, h, c, z) = alu::add16(p, q, false);
    cpu.set_hl(v);

    cpu.set_nf(false);
    cpu.set_hf(h);
    cpu.set_cf(c);

    (8, 1)
}

#[allow(unused_variables)]
fn op_0x001a(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = mmu.get8(cpu.get_de());
    cpu.set_a(v);

    (8, 1)
}

#[allow(unused_variables)]
fn op_0x001b(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = cpu.get_de().wrapping_sub(1);
    cpu.set_de(v);

    (8, 1)
}

#[allow(unused_variables)]
fn op_0x001c(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = cpu.get_e();
    let (v, h, c, z) = alu::add8(v, 1, false);
    cpu.set_e(v);
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(h);

    (4, 1)
}

#[allow(unused_variables)]
fn op_0x001d(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = cpu.get_e();
    let (v, h, c, z) = alu::sub8(v, 1, false);
    cpu.set_e(v);
    cpu.set_zf(z);
    cpu.set_nf(true);
    cpu.set_hf(h);

    (4, 1)
}

#[allow(unused_variables)]
fn op_0x001e(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = mmu.get8(cpu.get_pc().wrapping_add(arg));
    cpu.set_e(v);

    (8, 2)
}

#[allow(unused_variables)]
fn op_0x001f(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = cpu.get_a();
    let c = v & 1 != 0;
    let v = v.wrapping_shr(1);
    let v = v | if cpu.get_cf() { 0x80 } else { 0 };
    cpu.set_a(v);
    cpu.set_zf(false);
    cpu.set_nf(false);
    cpu.set_hf(false);
    cpu.set_cf(c);

    (4, 1)
}

#[allow(unused_variables)]
fn op_0x0020(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let flg = !cpu.get_zf();
    if flg {
        let p = mmu.get8(cpu.get_pc().wrapping_add(arg));
        let pc = cpu.get_pc().wrapping_add(alu::signed(p));
        cpu.set_pc(pc);
        return (12, 2);
    }

    (12, 2)
}

#[allow(unused_variables)]
fn op_0x0021(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = mmu.get16(cpu.get_pc().wrapping_add(arg));
    cpu.set_hl(v);

    (12, 3)
}

#[allow(unused_variables)]
fn op_0x0022(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = cpu.get_a();
    mmu.set8(cpu.get_hl(), v);

    (8, 1)
}

#[allow(unused_variables)]
fn op_0x0023(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = cpu.get_hl().wrapping_add(1);
    cpu.set_hl(v);

    (8, 1)
}

#[allow(unused_variables)]
fn op_0x0024(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = cpu.get_h();
    let (v, h, c, z) = alu::add8(v, 1, false);
    cpu.set_h(v);
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(h);

    (4, 1)
}

#[allow(unused_variables)]
fn op_0x0025(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = cpu.get_h();
    let (v, h, c, z) = alu::sub8(v, 1, false);
    cpu.set_h(v);
    cpu.set_zf(z);
    cpu.set_nf(true);
    cpu.set_hf(h);

    (4, 1)
}

#[allow(unused_variables)]
fn op_0x0026(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = mmu.get8(cpu.get_pc().wrapping_add(arg));
    cpu.set_h(v);

    (8, 2)
}

#[allow(unused_variables)]
fn op_0x0027(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let mut adj = 0;

    let v = cpu.get_a() as usize;

    if cpu.get_hf() || (!cpu.get_nf() && (v & 0xf) > 9) {
        adj |= 0x6;
    }

    let c = if cpu.get_cf() || (!cpu.get_nf() && v > 0x99) {
        adj |= 0x60;
        true
    } else {
        false
    };

    let v = if cpu.get_nf() { v - adj } else { v + adj };
    let v = (v & 0xff) as u8;
    let z = v == 0;

    cpu.set_a(v);
    cpu.set_zf(z);

    cpu.set_hf(false);
    cpu.set_cf(c);

    (4, 1)
}

#[allow(unused_variables)]
fn op_0x0028(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let flg = cpu.get_zf();
    if flg {
        let p = mmu.get8(cpu.get_pc().wrapping_add(arg));
        let pc = cpu.get_pc().wrapping_add(alu::signed(p));
        cpu.set_pc(pc);
        return (12, 2);
    }

    (12, 2)
}

#[allow(unused_variables)]
fn op_0x0029(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = cpu.get_hl();
    let q = cpu.get_hl();
    let (v, h, c, z) = alu::add16(p, q, false);
    cpu.set_hl(v);

    cpu.set_nf(false);
    cpu.set_hf(h);
    cpu.set_cf(c);

    (8, 1)
}

#[allow(unused_variables)]
fn op_0x002a(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = mmu.get8(cpu.get_hl());
    cpu.set_a(v);

    (8, 1)
}

#[allow(unused_variables)]
fn op_0x002b(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = cpu.get_hl().wrapping_sub(1);
    cpu.set_hl(v);

    (8, 1)
}

#[allow(unused_variables)]
fn op_0x002c(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = cpu.get_l();
    let (v, h, c, z) = alu::add8(v, 1, false);
    cpu.set_l(v);
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(h);

    (4, 1)
}

#[allow(unused_variables)]
fn op_0x002d(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = cpu.get_l();
    let (v, h, c, z) = alu::sub8(v, 1, false);
    cpu.set_l(v);
    cpu.set_zf(z);
    cpu.set_nf(true);
    cpu.set_hf(h);

    (4, 1)
}

#[allow(unused_variables)]
fn op_0x002e(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = mmu.get8(cpu.get_pc().wrapping_add(arg));
    cpu.set_l(v);

    (8, 2)
}

#[allow(unused_variables)]
fn op_0x002f(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    cpu.set_a(cpu.get_a() ^ 0xff);

    cpu.set_nf(true);
    cpu.set_hf(true);

    (4, 1)
}

#[allow(unused_variables)]
fn op_0x0030(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let flg = !cpu.get_cf();
    if flg {
        let p = mmu.get8(cpu.get_pc().wrapping_add(arg));
        let pc = cpu.get_pc().wrapping_add(alu::signed(p));
        cpu.set_pc(pc);
        return (12, 2);
    }

    (12, 2)
}

#[allow(unused_variables)]
fn op_0x0031(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = mmu.get16(cpu.get_pc().wrapping_add(arg));
    cpu.set_sp(v);

    (12, 3)
}

#[allow(unused_variables)]
fn op_0x0032(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = cpu.get_a();
    mmu.set8(cpu.get_hl(), v);

    (8, 1)
}

#[allow(unused_variables)]
fn op_0x0033(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = cpu.get_sp().wrapping_add(1);
    cpu.set_sp(v);

    (8, 1)
}

#[allow(unused_variables)]
fn op_0x0034(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = mmu.get8(cpu.get_hl());
    let (v, h, c, z) = alu::add8(v, 1, false);
    mmu.set8(cpu.get_hl(), v);
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(h);

    (12, 1)
}

#[allow(unused_variables)]
fn op_0x0035(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = mmu.get8(cpu.get_hl());
    let (v, h, c, z) = alu::sub8(v, 1, false);
    mmu.set8(cpu.get_hl(), v);
    cpu.set_zf(z);
    cpu.set_nf(true);
    cpu.set_hf(h);

    (12, 1)
}

#[allow(unused_variables)]
fn op_0x0036(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = mmu.get8(cpu.get_pc().wrapping_add(arg));
    mmu.set8(cpu.get_hl(), v);

    (12, 2)
}

#[allow(unused_variables)]
fn op_0x0037(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    cpu.set_cf(true);

    cpu.set_nf(false);
    cpu.set_hf(false);
    cpu.set_cf(true);

    (4, 1)
}

#[allow(unused_variables)]
fn op_0x0038(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let flg = cpu.get_cf();
    if flg {
        let p = mmu.get8(cpu.get_pc().wrapping_add(arg));
        let pc = cpu.get_pc().wrapping_add(alu::signed(p));
        cpu.set_pc(pc);
        return (12, 2);
    }

    (12, 2)
}

#[allow(unused_variables)]
fn op_0x0039(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = cpu.get_hl();
    let q = cpu.get_sp();
    let (v, h, c, z) = alu::add16(p, q, false);
    cpu.set_hl(v);

    cpu.set_nf(false);
    cpu.set_hf(h);
    cpu.set_cf(c);

    (8, 1)
}

#[allow(unused_variables)]
fn op_0x003a(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = mmu.get8(cpu.get_hl());
    cpu.set_a(v);

    (8, 1)
}

#[allow(unused_variables)]
fn op_0x003b(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = cpu.get_sp().wrapping_sub(1);
    cpu.set_sp(v);

    (8, 1)
}

#[allow(unused_variables)]
fn op_0x003c(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = cpu.get_a();
    let (v, h, c, z) = alu::add8(v, 1, false);
    cpu.set_a(v);
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(h);

    (4, 1)
}

#[allow(unused_variables)]
fn op_0x003d(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = cpu.get_a();
    let (v, h, c, z) = alu::sub8(v, 1, false);
    cpu.set_a(v);
    cpu.set_zf(z);
    cpu.set_nf(true);
    cpu.set_hf(h);

    (4, 1)
}

#[allow(unused_variables)]
fn op_0x003e(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = mmu.get8(cpu.get_pc().wrapping_add(arg));
    cpu.set_a(v);

    (8, 2)
}

#[allow(unused_variables)]
fn op_0x003f(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let c = !cpu.get_cf();

    cpu.set_nf(false);
    cpu.set_hf(false);
    cpu.set_cf(c);

    (4, 1)
}

#[allow(unused_variables)]
fn op_0x0040(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = cpu.get_b();
    cpu.set_b(v);

    (4, 1)
}

#[allow(unused_variables)]
fn op_0x0041(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = cpu.get_c();
    cpu.set_b(v);

    (4, 1)
}

#[allow(unused_variables)]
fn op_0x0042(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = cpu.get_d();
    cpu.set_b(v);

    (4, 1)
}

#[allow(unused_variables)]
fn op_0x0043(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = cpu.get_e();
    cpu.set_b(v);

    (4, 1)
}

#[allow(unused_variables)]
fn op_0x0044(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = cpu.get_h();
    cpu.set_b(v);

    (4, 1)
}

#[allow(unused_variables)]
fn op_0x0045(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = cpu.get_l();
    cpu.set_b(v);

    (4, 1)
}

#[allow(unused_variables)]
fn op_0x0046(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = mmu.get8(cpu.get_hl());
    cpu.set_b(v);

    (8, 1)
}

#[allow(unused_variables)]
fn op_0x0047(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = cpu.get_a();
    cpu.set_b(v);

    (4, 1)
}

#[allow(unused_variables)]
fn op_0x0048(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = cpu.get_b();
    cpu.set_c(v);

    (4, 1)
}

#[allow(unused_variables)]
fn op_0x0049(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = cpu.get_c();
    cpu.set_c(v);

    (4, 1)
}

#[allow(unused_variables)]
fn op_0x004a(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = cpu.get_d();
    cpu.set_c(v);

    (4, 1)
}

#[allow(unused_variables)]
fn op_0x004b(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = cpu.get_e();
    cpu.set_c(v);

    (4, 1)
}

#[allow(unused_variables)]
fn op_0x004c(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = cpu.get_h();
    cpu.set_c(v);

    (4, 1)
}

#[allow(unused_variables)]
fn op_0x004d(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = cpu.get_l();
    cpu.set_c(v);

    (4, 1)
}

#[allow(unused_variables)]
fn op_0x004e(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = mmu.get8(cpu.get_hl());
    cpu.set_c(v);

    (8, 1)
}

#[allow(unused_variables)]
fn op_0x004f(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = cpu.get_a();
    cpu.set_c(v);

    (4, 1)
}

#[allow(unused_variables)]
fn op_0x0050(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = cpu.get_b();
    cpu.set_d(v);

    (4, 1)
}

#[allow(unused_variables)]
fn op_0x0051(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = cpu.get_c();
    cpu.set_d(v);

    (4, 1)
}

#[allow(unused_variables)]
fn op_0x0052(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = cpu.get_d();
    cpu.set_d(v);

    (4, 1)
}

#[allow(unused_variables)]
fn op_0x0053(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = cpu.get_e();
    cpu.set_d(v);

    (4, 1)
}

#[allow(unused_variables)]
fn op_0x0054(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = cpu.get_h();
    cpu.set_d(v);

    (4, 1)
}

#[allow(unused_variables)]
fn op_0x0055(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = cpu.get_l();
    cpu.set_d(v);

    (4, 1)
}

#[allow(unused_variables)]
fn op_0x0056(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = mmu.get8(cpu.get_hl());
    cpu.set_d(v);

    (8, 1)
}

#[allow(unused_variables)]
fn op_0x0057(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = cpu.get_a();
    cpu.set_d(v);

    (4, 1)
}

#[allow(unused_variables)]
fn op_0x0058(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = cpu.get_b();
    cpu.set_e(v);

    (4, 1)
}

#[allow(unused_variables)]
fn op_0x0059(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = cpu.get_c();
    cpu.set_e(v);

    (4, 1)
}

#[allow(unused_variables)]
fn op_0x005a(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = cpu.get_d();
    cpu.set_e(v);

    (4, 1)
}

#[allow(unused_variables)]
fn op_0x005b(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = cpu.get_e();
    cpu.set_e(v);

    (4, 1)
}

#[allow(unused_variables)]
fn op_0x005c(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = cpu.get_h();
    cpu.set_e(v);

    (4, 1)
}

#[allow(unused_variables)]
fn op_0x005d(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = cpu.get_l();
    cpu.set_e(v);

    (4, 1)
}

#[allow(unused_variables)]
fn op_0x005e(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = mmu.get8(cpu.get_hl());
    cpu.set_e(v);

    (8, 1)
}

#[allow(unused_variables)]
fn op_0x005f(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = cpu.get_a();
    cpu.set_e(v);

    (4, 1)
}

#[allow(unused_variables)]
fn op_0x0060(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = cpu.get_b();
    cpu.set_h(v);

    (4, 1)
}

#[allow(unused_variables)]
fn op_0x0061(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = cpu.get_c();
    cpu.set_h(v);

    (4, 1)
}

#[allow(unused_variables)]
fn op_0x0062(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = cpu.get_d();
    cpu.set_h(v);

    (4, 1)
}

#[allow(unused_variables)]
fn op_0x0063(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = cpu.get_e();
    cpu.set_h(v);

    (4, 1)
}

#[allow(unused_variables)]
fn op_0x0064(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = cpu.get_h();
    cpu.set_h(v);

    (4, 1)
}

#[allow(unused_variables)]
fn op_0x0065(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = cpu.get_l();
    cpu.set_h(v);

    (4, 1)
}

#[allow(unused_variables)]
fn op_0x0066(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = mmu.get8(cpu.get_hl());
    cpu.set_h(v);

    (8, 1)
}

#[allow(unused_variables)]
fn op_0x0067(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = cpu.get_a();
    cpu.set_h(v);

    (4, 1)
}

#[allow(unused_variables)]
fn op_0x0068(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = cpu.get_b();
    cpu.set_l(v);

    (4, 1)
}

#[allow(unused_variables)]
fn op_0x0069(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = cpu.get_c();
    cpu.set_l(v);

    (4, 1)
}

#[allow(unused_variables)]
fn op_0x006a(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = cpu.get_d();
    cpu.set_l(v);

    (4, 1)
}

#[allow(unused_variables)]
fn op_0x006b(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = cpu.get_e();
    cpu.set_l(v);

    (4, 1)
}

#[allow(unused_variables)]
fn op_0x006c(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = cpu.get_h();
    cpu.set_l(v);

    (4, 1)
}

#[allow(unused_variables)]
fn op_0x006d(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = cpu.get_l();
    cpu.set_l(v);

    (4, 1)
}

#[allow(unused_variables)]
fn op_0x006e(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = mmu.get8(cpu.get_hl());
    cpu.set_l(v);

    (8, 1)
}

#[allow(unused_variables)]
fn op_0x006f(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = cpu.get_a();
    cpu.set_l(v);

    (4, 1)
}

#[allow(unused_variables)]
fn op_0x0070(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = cpu.get_b();
    mmu.set8(cpu.get_hl(), v);

    (8, 1)
}

#[allow(unused_variables)]
fn op_0x0071(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = cpu.get_c();
    mmu.set8(cpu.get_hl(), v);

    (8, 1)
}

#[allow(unused_variables)]
fn op_0x0072(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = cpu.get_d();
    mmu.set8(cpu.get_hl(), v);

    (8, 1)
}

#[allow(unused_variables)]
fn op_0x0073(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = cpu.get_e();
    mmu.set8(cpu.get_hl(), v);

    (8, 1)
}

#[allow(unused_variables)]
fn op_0x0074(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = cpu.get_h();
    mmu.set8(cpu.get_hl(), v);

    (8, 1)
}

#[allow(unused_variables)]
fn op_0x0075(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = cpu.get_l();
    mmu.set8(cpu.get_hl(), v);

    (8, 1)
}

#[allow(unused_variables)]
fn op_0x0076(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    cpu.halt();

    (4, 1)
}

#[allow(unused_variables)]
fn op_0x0077(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = cpu.get_a();
    mmu.set8(cpu.get_hl(), v);

    (8, 1)
}

#[allow(unused_variables)]
fn op_0x0078(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = cpu.get_b();
    cpu.set_a(v);

    (4, 1)
}

#[allow(unused_variables)]
fn op_0x0079(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = cpu.get_c();
    cpu.set_a(v);

    (4, 1)
}

#[allow(unused_variables)]
fn op_0x007a(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = cpu.get_d();
    cpu.set_a(v);

    (4, 1)
}

#[allow(unused_variables)]
fn op_0x007b(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = cpu.get_e();
    cpu.set_a(v);

    (4, 1)
}

#[allow(unused_variables)]
fn op_0x007c(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = cpu.get_h();
    cpu.set_a(v);

    (4, 1)
}

#[allow(unused_variables)]
fn op_0x007d(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = cpu.get_l();
    cpu.set_a(v);

    (4, 1)
}

#[allow(unused_variables)]
fn op_0x007e(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = mmu.get8(cpu.get_hl());
    cpu.set_a(v);

    (8, 1)
}

#[allow(unused_variables)]
fn op_0x007f(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = cpu.get_a();
    cpu.set_a(v);

    (4, 1)
}

#[allow(unused_variables)]
fn op_0x0080(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = cpu.get_a();
    let q = cpu.get_b();
    let (v, h, c, z) = alu::add8(p, q, false);
    cpu.set_a(v);
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(h);
    cpu.set_cf(c);

    (4, 1)
}

#[allow(unused_variables)]
fn op_0x0081(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = cpu.get_a();
    let q = cpu.get_c();
    let (v, h, c, z) = alu::add8(p, q, false);
    cpu.set_a(v);
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(h);
    cpu.set_cf(c);

    (4, 1)
}

#[allow(unused_variables)]
fn op_0x0082(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = cpu.get_a();
    let q = cpu.get_d();
    let (v, h, c, z) = alu::add8(p, q, false);
    cpu.set_a(v);
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(h);
    cpu.set_cf(c);

    (4, 1)
}

#[allow(unused_variables)]
fn op_0x0083(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = cpu.get_a();
    let q = cpu.get_e();
    let (v, h, c, z) = alu::add8(p, q, false);
    cpu.set_a(v);
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(h);
    cpu.set_cf(c);

    (4, 1)
}

#[allow(unused_variables)]
fn op_0x0084(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = cpu.get_a();
    let q = cpu.get_h();
    let (v, h, c, z) = alu::add8(p, q, false);
    cpu.set_a(v);
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(h);
    cpu.set_cf(c);

    (4, 1)
}

#[allow(unused_variables)]
fn op_0x0085(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = cpu.get_a();
    let q = cpu.get_l();
    let (v, h, c, z) = alu::add8(p, q, false);
    cpu.set_a(v);
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(h);
    cpu.set_cf(c);

    (4, 1)
}

#[allow(unused_variables)]
fn op_0x0086(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = cpu.get_a();
    let q = mmu.get8(cpu.get_hl());
    let (v, h, c, z) = alu::add8(p, q, false);
    cpu.set_a(v);
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(h);
    cpu.set_cf(c);

    (8, 1)
}

#[allow(unused_variables)]
fn op_0x0087(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = cpu.get_a();
    let q = cpu.get_a();
    let (v, h, c, z) = alu::add8(p, q, false);
    cpu.set_a(v);
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(h);
    cpu.set_cf(c);

    (4, 1)
}

#[allow(unused_variables)]
fn op_0x0088(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = cpu.get_a();
    let q = cpu.get_b();
    let (v, h, c, z) = alu::add8(p, q, cpu.get_cf());
    cpu.set_a(v);
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(h);
    cpu.set_cf(c);

    (4, 1)
}

#[allow(unused_variables)]
fn op_0x0089(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = cpu.get_a();
    let q = cpu.get_c();
    let (v, h, c, z) = alu::add8(p, q, cpu.get_cf());
    cpu.set_a(v);
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(h);
    cpu.set_cf(c);

    (4, 1)
}

#[allow(unused_variables)]
fn op_0x008a(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = cpu.get_a();
    let q = cpu.get_d();
    let (v, h, c, z) = alu::add8(p, q, cpu.get_cf());
    cpu.set_a(v);
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(h);
    cpu.set_cf(c);

    (4, 1)
}

#[allow(unused_variables)]
fn op_0x008b(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = cpu.get_a();
    let q = cpu.get_e();
    let (v, h, c, z) = alu::add8(p, q, cpu.get_cf());
    cpu.set_a(v);
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(h);
    cpu.set_cf(c);

    (4, 1)
}

#[allow(unused_variables)]
fn op_0x008c(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = cpu.get_a();
    let q = cpu.get_h();
    let (v, h, c, z) = alu::add8(p, q, cpu.get_cf());
    cpu.set_a(v);
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(h);
    cpu.set_cf(c);

    (4, 1)
}

#[allow(unused_variables)]
fn op_0x008d(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = cpu.get_a();
    let q = cpu.get_l();
    let (v, h, c, z) = alu::add8(p, q, cpu.get_cf());
    cpu.set_a(v);
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(h);
    cpu.set_cf(c);

    (4, 1)
}

#[allow(unused_variables)]
fn op_0x008e(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = cpu.get_a();
    let q = mmu.get8(cpu.get_hl());
    let (v, h, c, z) = alu::add8(p, q, cpu.get_cf());
    cpu.set_a(v);
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(h);
    cpu.set_cf(c);

    (8, 1)
}

#[allow(unused_variables)]
fn op_0x008f(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = cpu.get_a();
    let q = cpu.get_a();
    let (v, h, c, z) = alu::add8(p, q, cpu.get_cf());
    cpu.set_a(v);
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(h);
    cpu.set_cf(c);

    (4, 1)
}

#[allow(unused_variables)]
fn op_0x0090(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = cpu.get_a();
    let q = cpu.get_b();
    let (v, h, c, z) = alu::sub8(p, q, false);
    cpu.set_a(v);
    cpu.set_zf(z);
    cpu.set_nf(true);
    cpu.set_hf(h);
    cpu.set_cf(c);

    (4, 1)
}

#[allow(unused_variables)]
fn op_0x0091(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = cpu.get_a();
    let q = cpu.get_c();
    let (v, h, c, z) = alu::sub8(p, q, false);
    cpu.set_a(v);
    cpu.set_zf(z);
    cpu.set_nf(true);
    cpu.set_hf(h);
    cpu.set_cf(c);

    (4, 1)
}

#[allow(unused_variables)]
fn op_0x0092(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = cpu.get_a();
    let q = cpu.get_d();
    let (v, h, c, z) = alu::sub8(p, q, false);
    cpu.set_a(v);
    cpu.set_zf(z);
    cpu.set_nf(true);
    cpu.set_hf(h);
    cpu.set_cf(c);

    (4, 1)
}

#[allow(unused_variables)]
fn op_0x0093(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = cpu.get_a();
    let q = cpu.get_e();
    let (v, h, c, z) = alu::sub8(p, q, false);
    cpu.set_a(v);
    cpu.set_zf(z);
    cpu.set_nf(true);
    cpu.set_hf(h);
    cpu.set_cf(c);

    (4, 1)
}

#[allow(unused_variables)]
fn op_0x0094(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = cpu.get_a();
    let q = cpu.get_h();
    let (v, h, c, z) = alu::sub8(p, q, false);
    cpu.set_a(v);
    cpu.set_zf(z);
    cpu.set_nf(true);
    cpu.set_hf(h);
    cpu.set_cf(c);

    (4, 1)
}

#[allow(unused_variables)]
fn op_0x0095(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = cpu.get_a();
    let q = cpu.get_l();
    let (v, h, c, z) = alu::sub8(p, q, false);
    cpu.set_a(v);
    cpu.set_zf(z);
    cpu.set_nf(true);
    cpu.set_hf(h);
    cpu.set_cf(c);

    (4, 1)
}

#[allow(unused_variables)]
fn op_0x0096(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = cpu.get_a();
    let q = mmu.get8(cpu.get_hl());
    let (v, h, c, z) = alu::sub8(p, q, false);
    cpu.set_a(v);
    cpu.set_zf(z);
    cpu.set_nf(true);
    cpu.set_hf(h);
    cpu.set_cf(c);

    (8, 1)
}

#[allow(unused_variables)]
fn op_0x0097(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = cpu.get_a();
    let q = cpu.get_a();
    let (v, h, c, z) = alu::sub8(p, q, false);
    cpu.set_a(v);
    cpu.set_zf(true);
    cpu.set_nf(true);
    cpu.set_hf(false);
    cpu.set_cf(false);

    (4, 1)
}

#[allow(unused_variables)]
fn op_0x0098(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = cpu.get_a();
    let q = cpu.get_b();
    let (v, h, c, z) = alu::sub8(p, q, cpu.get_cf());
    cpu.set_a(v);
    cpu.set_zf(z);
    cpu.set_nf(true);
    cpu.set_hf(h);
    cpu.set_cf(c);

    (4, 1)
}

#[allow(unused_variables)]
fn op_0x0099(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = cpu.get_a();
    let q = cpu.get_c();
    let (v, h, c, z) = alu::sub8(p, q, cpu.get_cf());
    cpu.set_a(v);
    cpu.set_zf(z);
    cpu.set_nf(true);
    cpu.set_hf(h);
    cpu.set_cf(c);

    (4, 1)
}

#[allow(unused_variables)]
fn op_0x009a(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = cpu.get_a();
    let q = cpu.get_d();
    let (v, h, c, z) = alu::sub8(p, q, cpu.get_cf());
    cpu.set_a(v);
    cpu.set_zf(z);
    cpu.set_nf(true);
    cpu.set_hf(h);
    cpu.set_cf(c);

    (4, 1)
}

#[allow(unused_variables)]
fn op_0x009b(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = cpu.get_a();
    let q = cpu.get_e();
    let (v, h, c, z) = alu::sub8(p, q, cpu.get_cf());
    cpu.set_a(v);
    cpu.set_zf(z);
    cpu.set_nf(true);
    cpu.set_hf(h);
    cpu.set_cf(c);

    (4, 1)
}

#[allow(unused_variables)]
fn op_0x009c(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = cpu.get_a();
    let q = cpu.get_h();
    let (v, h, c, z) = alu::sub8(p, q, cpu.get_cf());
    cpu.set_a(v);
    cpu.set_zf(z);
    cpu.set_nf(true);
    cpu.set_hf(h);
    cpu.set_cf(c);

    (4, 1)
}

#[allow(unused_variables)]
fn op_0x009d(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = cpu.get_a();
    let q = cpu.get_l();
    let (v, h, c, z) = alu::sub8(p, q, cpu.get_cf());
    cpu.set_a(v);
    cpu.set_zf(z);
    cpu.set_nf(true);
    cpu.set_hf(h);
    cpu.set_cf(c);

    (4, 1)
}

#[allow(unused_variables)]
fn op_0x009e(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = cpu.get_a();
    let q = mmu.get8(cpu.get_hl());
    let (v, h, c, z) = alu::sub8(p, q, cpu.get_cf());
    cpu.set_a(v);
    cpu.set_zf(z);
    cpu.set_nf(true);
    cpu.set_hf(h);
    cpu.set_cf(c);

    (8, 1)
}

#[allow(unused_variables)]
fn op_0x009f(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = cpu.get_a();
    let q = cpu.get_a();
    let (v, h, c, z) = alu::sub8(p, q, cpu.get_cf());
    cpu.set_a(v);
    cpu.set_zf(z);
    cpu.set_nf(true);
    cpu.set_hf(h);
    cpu.set_cf(c);

    (4, 1)
}

#[allow(unused_variables)]
fn op_0x00a0(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    cpu.set_a(cpu.get_a() & cpu.get_b());
    let z = cpu.get_a() == 0;
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(true);
    cpu.set_cf(false);

    (4, 1)
}

#[allow(unused_variables)]
fn op_0x00a1(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    cpu.set_a(cpu.get_a() & cpu.get_c());
    let z = cpu.get_a() == 0;
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(true);
    cpu.set_cf(false);

    (4, 1)
}

#[allow(unused_variables)]
fn op_0x00a2(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    cpu.set_a(cpu.get_a() & cpu.get_d());
    let z = cpu.get_a() == 0;
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(true);
    cpu.set_cf(false);

    (4, 1)
}

#[allow(unused_variables)]
fn op_0x00a3(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    cpu.set_a(cpu.get_a() & cpu.get_e());
    let z = cpu.get_a() == 0;
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(true);
    cpu.set_cf(false);

    (4, 1)
}

#[allow(unused_variables)]
fn op_0x00a4(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    cpu.set_a(cpu.get_a() & cpu.get_h());
    let z = cpu.get_a() == 0;
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(true);
    cpu.set_cf(false);

    (4, 1)
}

#[allow(unused_variables)]
fn op_0x00a5(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    cpu.set_a(cpu.get_a() & cpu.get_l());
    let z = cpu.get_a() == 0;
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(true);
    cpu.set_cf(false);

    (4, 1)
}

#[allow(unused_variables)]
fn op_0x00a6(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    cpu.set_a(cpu.get_a() & mmu.get8(cpu.get_hl()));
    let z = cpu.get_a() == 0;
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(true);
    cpu.set_cf(false);

    (8, 1)
}

#[allow(unused_variables)]
fn op_0x00a7(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    cpu.set_a(cpu.get_a() & cpu.get_a());
    let z = cpu.get_a() == 0;
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(true);
    cpu.set_cf(false);

    (4, 1)
}

#[allow(unused_variables)]
fn op_0x00a8(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    cpu.set_a(cpu.get_a() ^ cpu.get_b());
    let z = cpu.get_a() == 0;
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(false);
    cpu.set_cf(false);

    (4, 1)
}

#[allow(unused_variables)]
fn op_0x00a9(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    cpu.set_a(cpu.get_a() ^ cpu.get_c());
    let z = cpu.get_a() == 0;
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(false);
    cpu.set_cf(false);

    (4, 1)
}

#[allow(unused_variables)]
fn op_0x00aa(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    cpu.set_a(cpu.get_a() ^ cpu.get_d());
    let z = cpu.get_a() == 0;
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(false);
    cpu.set_cf(false);

    (4, 1)
}

#[allow(unused_variables)]
fn op_0x00ab(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    cpu.set_a(cpu.get_a() ^ cpu.get_e());
    let z = cpu.get_a() == 0;
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(false);
    cpu.set_cf(false);

    (4, 1)
}

#[allow(unused_variables)]
fn op_0x00ac(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    cpu.set_a(cpu.get_a() ^ cpu.get_h());
    let z = cpu.get_a() == 0;
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(false);
    cpu.set_cf(false);

    (4, 1)
}

#[allow(unused_variables)]
fn op_0x00ad(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    cpu.set_a(cpu.get_a() ^ cpu.get_l());
    let z = cpu.get_a() == 0;
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(false);
    cpu.set_cf(false);

    (4, 1)
}

#[allow(unused_variables)]
fn op_0x00ae(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    cpu.set_a(cpu.get_a() ^ mmu.get8(cpu.get_hl()));
    let z = cpu.get_a() == 0;
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(false);
    cpu.set_cf(false);

    (8, 1)
}

#[allow(unused_variables)]
fn op_0x00af(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    cpu.set_a(cpu.get_a() ^ cpu.get_a());
    let z = cpu.get_a() == 0;
    cpu.set_zf(true);
    cpu.set_nf(false);
    cpu.set_hf(false);
    cpu.set_cf(false);

    (4, 1)
}

#[allow(unused_variables)]
fn op_0x00b0(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    cpu.set_a(cpu.get_a() | cpu.get_b());
    let z = cpu.get_a() == 0;
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(false);
    cpu.set_cf(false);

    (4, 1)
}

#[allow(unused_variables)]
fn op_0x00b1(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    cpu.set_a(cpu.get_a() | cpu.get_c());
    let z = cpu.get_a() == 0;
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(false);
    cpu.set_cf(false);

    (4, 1)
}

#[allow(unused_variables)]
fn op_0x00b2(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    cpu.set_a(cpu.get_a() | cpu.get_d());
    let z = cpu.get_a() == 0;
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(false);
    cpu.set_cf(false);

    (4, 1)
}

#[allow(unused_variables)]
fn op_0x00b3(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    cpu.set_a(cpu.get_a() | cpu.get_e());
    let z = cpu.get_a() == 0;
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(false);
    cpu.set_cf(false);

    (4, 1)
}

#[allow(unused_variables)]
fn op_0x00b4(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    cpu.set_a(cpu.get_a() | cpu.get_h());
    let z = cpu.get_a() == 0;
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(false);
    cpu.set_cf(false);

    (4, 1)
}

#[allow(unused_variables)]
fn op_0x00b5(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    cpu.set_a(cpu.get_a() | cpu.get_l());
    let z = cpu.get_a() == 0;
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(false);
    cpu.set_cf(false);

    (4, 1)
}

#[allow(unused_variables)]
fn op_0x00b6(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    cpu.set_a(cpu.get_a() | mmu.get8(cpu.get_hl()));
    let z = cpu.get_a() == 0;
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(false);
    cpu.set_cf(false);

    (8, 1)
}

#[allow(unused_variables)]
fn op_0x00b7(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    cpu.set_a(cpu.get_a() | cpu.get_a());
    let z = cpu.get_a() == 0;
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(false);
    cpu.set_cf(false);

    (4, 1)
}

#[allow(unused_variables)]
fn op_0x00b8(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = cpu.get_a();
    let q = cpu.get_b();
    let (_, h, c, z) = alu::sub8(p, q, false);
    cpu.set_zf(z);
    cpu.set_nf(true);
    cpu.set_hf(h);
    cpu.set_cf(c);

    (4, 1)
}

#[allow(unused_variables)]
fn op_0x00b9(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = cpu.get_a();
    let q = cpu.get_c();
    let (_, h, c, z) = alu::sub8(p, q, false);
    cpu.set_zf(z);
    cpu.set_nf(true);
    cpu.set_hf(h);
    cpu.set_cf(c);

    (4, 1)
}

#[allow(unused_variables)]
fn op_0x00ba(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = cpu.get_a();
    let q = cpu.get_d();
    let (_, h, c, z) = alu::sub8(p, q, false);
    cpu.set_zf(z);
    cpu.set_nf(true);
    cpu.set_hf(h);
    cpu.set_cf(c);

    (4, 1)
}

#[allow(unused_variables)]
fn op_0x00bb(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = cpu.get_a();
    let q = cpu.get_e();
    let (_, h, c, z) = alu::sub8(p, q, false);
    cpu.set_zf(z);
    cpu.set_nf(true);
    cpu.set_hf(h);
    cpu.set_cf(c);

    (4, 1)
}

#[allow(unused_variables)]
fn op_0x00bc(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = cpu.get_a();
    let q = cpu.get_h();
    let (_, h, c, z) = alu::sub8(p, q, false);
    cpu.set_zf(z);
    cpu.set_nf(true);
    cpu.set_hf(h);
    cpu.set_cf(c);

    (4, 1)
}

#[allow(unused_variables)]
fn op_0x00bd(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = cpu.get_a();
    let q = cpu.get_l();
    let (_, h, c, z) = alu::sub8(p, q, false);
    cpu.set_zf(z);
    cpu.set_nf(true);
    cpu.set_hf(h);
    cpu.set_cf(c);

    (4, 1)
}

#[allow(unused_variables)]
fn op_0x00be(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = cpu.get_a();
    let q = mmu.get8(cpu.get_hl());
    let (_, h, c, z) = alu::sub8(p, q, false);
    cpu.set_zf(z);
    cpu.set_nf(true);
    cpu.set_hf(h);
    cpu.set_cf(c);

    (8, 1)
}

#[allow(unused_variables)]
fn op_0x00bf(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = cpu.get_a();
    let q = cpu.get_a();
    let (_, h, c, z) = alu::sub8(p, q, false);
    cpu.set_zf(true);
    cpu.set_nf(true);
    cpu.set_hf(false);
    cpu.set_cf(false);

    (4, 1)
}

#[allow(unused_variables)]
fn op_0x00c0(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let flg = !cpu.get_zf();
    if flg {
        let pc = cpu.pop(mmu);
        cpu.set_pc(pc);
        return (20, 0);
    }

    (20, 1)
}

#[allow(unused_variables)]
fn op_0x00c1(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = cpu.pop(mmu);
    cpu.set_bc(v);

    (12, 1)
}

#[allow(unused_variables)]
fn op_0x00c2(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let flg = !cpu.get_zf();
    if flg {
        let pc = mmu.get16(cpu.get_pc().wrapping_add(arg));
        cpu.set_pc(pc);
        return (16, 0);
    }

    (16, 3)
}

#[allow(unused_variables)]
fn op_0x00c3(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let pc = mmu.get16(cpu.get_pc().wrapping_add(arg));
    cpu.set_pc(pc.wrapping_sub(3));

    (16, 3)
}

#[allow(unused_variables)]
fn op_0x00c4(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let flg = !cpu.get_zf();
    if flg {
        cpu.push(mmu, cpu.get_pc().wrapping_add(3));
        cpu.set_pc(mmu.get16(cpu.get_pc().wrapping_add(arg)));
        return (24, 0);
    }

    (24, 3)
}

#[allow(unused_variables)]
fn op_0x00c5(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    cpu.push(mmu, cpu.get_bc());

    (16, 1)
}

#[allow(unused_variables)]
fn op_0x00c6(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = cpu.get_a();
    let q = mmu.get8(cpu.get_pc().wrapping_add(arg));
    let (v, h, c, z) = alu::add8(p, q, false);
    cpu.set_a(v);
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(h);
    cpu.set_cf(c);

    (8, 2)
}

#[allow(unused_variables)]
fn op_0x00c7(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    cpu.push(mmu, cpu.get_pc().wrapping_add(1));
    cpu.set_pc(0x00C7u16.wrapping_sub(1));

    (16, 1)
}

#[allow(unused_variables)]
fn op_0x00c8(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let flg = cpu.get_zf();
    if flg {
        let pc = cpu.pop(mmu);
        cpu.set_pc(pc);
        return (20, 0);
    }

    (20, 1)
}

#[allow(unused_variables)]
fn op_0x00c9(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let pc = cpu.pop(mmu).wrapping_sub(1);
    cpu.set_pc(pc);

    (16, 1)
}

#[allow(unused_variables)]
fn op_0x00ca(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let flg = cpu.get_zf();
    if flg {
        let pc = mmu.get16(cpu.get_pc().wrapping_add(arg));
        cpu.set_pc(pc);
        return (16, 0);
    }

    (16, 3)
}

#[allow(unused_variables)]
fn op_0x00cb(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    (4, 1)
}

#[allow(unused_variables)]
fn op_0x00cc(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let flg = cpu.get_zf();
    if flg {
        cpu.push(mmu, cpu.get_pc().wrapping_add(3));
        cpu.set_pc(mmu.get16(cpu.get_pc().wrapping_add(arg)));
        return (24, 0);
    }

    (24, 3)
}

#[allow(unused_variables)]
fn op_0x00cd(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    cpu.push(mmu, cpu.get_pc().wrapping_add(3));
    cpu.set_pc(mmu.get16(cpu.get_pc().wrapping_add(arg)).wrapping_sub(3));

    (24, 3)
}

#[allow(unused_variables)]
fn op_0x00ce(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = cpu.get_a();
    let q = mmu.get8(cpu.get_pc().wrapping_add(arg));
    let (v, h, c, z) = alu::add8(p, q, cpu.get_cf());
    cpu.set_a(v);
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(h);
    cpu.set_cf(c);

    (8, 2)
}

#[allow(unused_variables)]
fn op_0x00cf(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    cpu.push(mmu, cpu.get_pc().wrapping_add(1));
    cpu.set_pc(0x00CFu16.wrapping_sub(1));

    (16, 1)
}

#[allow(unused_variables)]
fn op_0x00d0(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let flg = !cpu.get_cf();
    if flg {
        let pc = cpu.pop(mmu);
        cpu.set_pc(pc);
        return (20, 0);
    }

    (20, 1)
}

#[allow(unused_variables)]
fn op_0x00d1(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = cpu.pop(mmu);
    cpu.set_de(v);

    (12, 1)
}

#[allow(unused_variables)]
fn op_0x00d2(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let flg = !cpu.get_cf();
    if flg {
        let pc = mmu.get16(cpu.get_pc().wrapping_add(arg));
        cpu.set_pc(pc);
        return (16, 0);
    }

    (16, 3)
}

#[allow(unused_variables)]
fn op_0x00d4(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let flg = !cpu.get_cf();
    if flg {
        cpu.push(mmu, cpu.get_pc().wrapping_add(3));
        cpu.set_pc(mmu.get16(cpu.get_pc().wrapping_add(arg)));
        return (24, 0);
    }

    (24, 3)
}

#[allow(unused_variables)]
fn op_0x00d5(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    cpu.push(mmu, cpu.get_de());

    (16, 1)
}

#[allow(unused_variables)]
fn op_0x00d6(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = cpu.get_a();
    let q = mmu.get8(cpu.get_pc().wrapping_add(arg));
    let (v, h, c, z) = alu::sub8(p, q, false);
    cpu.set_a(v);
    cpu.set_zf(z);
    cpu.set_nf(true);
    cpu.set_hf(h);
    cpu.set_cf(c);

    (8, 2)
}

#[allow(unused_variables)]
fn op_0x00d7(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    cpu.push(mmu, cpu.get_pc().wrapping_add(1));
    cpu.set_pc(0x00D7u16.wrapping_sub(1));

    (16, 1)
}

#[allow(unused_variables)]
fn op_0x00d8(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let flg = cpu.get_cf();
    if flg {
        let pc = cpu.pop(mmu);
        cpu.set_pc(pc);
        return (20, 0);
    }

    (20, 1)
}

#[allow(unused_variables)]
fn op_0x00d9(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let pc = cpu.pop(mmu).wrapping_sub(1);
    cpu.set_pc(pc);
    cpu.enable_interrupt();

    (16, 1)
}

#[allow(unused_variables)]
fn op_0x00da(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let flg = cpu.get_cf();
    if flg {
        let pc = mmu.get16(cpu.get_pc().wrapping_add(arg));
        cpu.set_pc(pc);
        return (16, 0);
    }

    (16, 3)
}

#[allow(unused_variables)]
fn op_0x00dc(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let flg = cpu.get_cf();
    if flg {
        cpu.push(mmu, cpu.get_pc().wrapping_add(3));
        cpu.set_pc(mmu.get16(cpu.get_pc().wrapping_add(arg)));
        return (24, 0);
    }

    (24, 3)
}

#[allow(unused_variables)]
fn op_0x00de(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = cpu.get_a();
    let q = mmu.get8(cpu.get_pc().wrapping_add(arg));
    let (v, h, c, z) = alu::sub8(p, q, cpu.get_cf());
    cpu.set_a(v);
    cpu.set_zf(z);
    cpu.set_nf(true);
    cpu.set_hf(h);
    cpu.set_cf(c);

    (8, 2)
}

#[allow(unused_variables)]
fn op_0x00df(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    cpu.push(mmu, cpu.get_pc().wrapping_add(1));
    cpu.set_pc(0x00DFu16.wrapping_sub(1));

    (16, 1)
}

#[allow(unused_variables)]
fn op_0x00e0(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    (12, 2)
}

#[allow(unused_variables)]
fn op_0x00e1(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = cpu.pop(mmu);
    cpu.set_hl(v);

    (12, 1)
}

#[allow(unused_variables)]
fn op_0x00e2(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = cpu.get_a();
    mmu.set8(0xff00 + cpu.get_c() as u16, v);

    (8, 1)
}

#[allow(unused_variables)]
fn op_0x00e5(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    cpu.push(mmu, cpu.get_hl());

    (16, 1)
}

#[allow(unused_variables)]
fn op_0x00e6(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    cpu.set_a(cpu.get_a() & mmu.get8(cpu.get_pc().wrapping_add(arg)));
    let z = cpu.get_a() == 0;
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(true);
    cpu.set_cf(false);

    (8, 2)
}

#[allow(unused_variables)]
fn op_0x00e7(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    cpu.push(mmu, cpu.get_pc().wrapping_add(1));
    cpu.set_pc(0x00E7u16.wrapping_sub(1));

    (16, 1)
}

#[allow(unused_variables)]
fn op_0x00e8(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = cpu.get_sp();
    let q = mmu.get8(cpu.get_pc().wrapping_add(arg));
    let (v, h, c, z) = alu::add16e(p, q, false);
    cpu.set_sp(v);
    cpu.set_zf(false);
    cpu.set_nf(false);
    cpu.set_hf(h);
    cpu.set_cf(c);

    (16, 2)
}

#[allow(unused_variables)]
fn op_0x00e9(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let pc = cpu.get_hl();
    cpu.set_pc(pc.wrapping_sub(1));

    (4, 1)
}

#[allow(unused_variables)]
fn op_0x00ea(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = cpu.get_a();
    mmu.set8(mmu.get16(cpu.get_pc().wrapping_add(arg)), v);

    (16, 3)
}

#[allow(unused_variables)]
fn op_0x00ee(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    cpu.set_a(cpu.get_a() ^ mmu.get8(cpu.get_pc().wrapping_add(arg)));
    let z = cpu.get_a() == 0;
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(false);
    cpu.set_cf(false);

    (8, 2)
}

#[allow(unused_variables)]
fn op_0x00ef(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    cpu.push(mmu, cpu.get_pc().wrapping_add(1));
    cpu.set_pc(0x00EFu16.wrapping_sub(1));

    (16, 1)
}

#[allow(unused_variables)]
fn op_0x00f0(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    (12, 2)
}

#[allow(unused_variables)]
fn op_0x00f1(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = cpu.pop(mmu);
    cpu.set_af(v);

    (12, 1)
}

#[allow(unused_variables)]
fn op_0x00f2(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = mmu.get8(0xff00 + cpu.get_c() as u16);
    cpu.set_a(v);

    (8, 1)
}

#[allow(unused_variables)]
fn op_0x00f3(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    cpu.disable_interrupt();

    (4, 1)
}

#[allow(unused_variables)]
fn op_0x00f5(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    cpu.push(mmu, cpu.get_af());

    (16, 1)
}

#[allow(unused_variables)]
fn op_0x00f6(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    cpu.set_a(cpu.get_a() | mmu.get8(cpu.get_pc().wrapping_add(arg)));
    let z = cpu.get_a() == 0;
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(false);
    cpu.set_cf(false);

    (8, 2)
}

#[allow(unused_variables)]
fn op_0x00f7(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    cpu.push(mmu, cpu.get_pc().wrapping_add(1));
    cpu.set_pc(0x00F7u16.wrapping_sub(1));

    (16, 1)
}

#[allow(unused_variables)]
fn op_0x00f8(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = cpu.get_sp();
    let q = mmu.get8(cpu.get_pc().wrapping_add(arg));
    let (v, h, c, z) = alu::add16e(p, q, false);
    cpu.set_hl(v);
    cpu.set_zf(false);
    cpu.set_nf(false);
    cpu.set_hf(h);
    cpu.set_cf(c);

    (12, 2)
}

#[allow(unused_variables)]
fn op_0x00f9(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = cpu.get_hl();
    cpu.set_sp(v);

    (8, 1)
}

#[allow(unused_variables)]
fn op_0x00fa(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = mmu.get8(mmu.get16(cpu.get_pc().wrapping_add(arg)));
    cpu.set_a(v);

    (16, 3)
}

#[allow(unused_variables)]
fn op_0x00fb(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    cpu.enable_interrupt();

    (4, 1)
}

#[allow(unused_variables)]
fn op_0x00fe(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = cpu.get_a();
    let q = mmu.get8(cpu.get_pc().wrapping_add(arg));
    let (_, h, c, z) = alu::sub8(p, q, false);
    cpu.set_zf(z);
    cpu.set_nf(true);
    cpu.set_hf(h);
    cpu.set_cf(c);

    (8, 2)
}

#[allow(unused_variables)]
fn op_0x00ff(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    cpu.push(mmu, cpu.get_pc().wrapping_add(1));
    cpu.set_pc(0x00FFu16.wrapping_sub(1));

    (16, 1)
}

#[allow(unused_variables)]
fn op_0xcb00(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = cpu.get_b();
    let c = v & 0x80 != 0;
    let v = v.rotate_left(1);
    let z = v == 0;
    cpu.set_b(v);
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(false);
    cpu.set_cf(c);

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcb01(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = cpu.get_c();
    let c = v & 0x80 != 0;
    let v = v.rotate_left(1);
    let z = v == 0;
    cpu.set_c(v);
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(false);
    cpu.set_cf(c);

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcb02(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = cpu.get_d();
    let c = v & 0x80 != 0;
    let v = v.rotate_left(1);
    let z = v == 0;
    cpu.set_d(v);
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(false);
    cpu.set_cf(c);

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcb03(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = cpu.get_e();
    let c = v & 0x80 != 0;
    let v = v.rotate_left(1);
    let z = v == 0;
    cpu.set_e(v);
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(false);
    cpu.set_cf(c);

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcb04(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = cpu.get_h();
    let c = v & 0x80 != 0;
    let v = v.rotate_left(1);
    let z = v == 0;
    cpu.set_h(v);
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(false);
    cpu.set_cf(c);

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcb05(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = cpu.get_l();
    let c = v & 0x80 != 0;
    let v = v.rotate_left(1);
    let z = v == 0;
    cpu.set_l(v);
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(false);
    cpu.set_cf(c);

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcb06(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = mmu.get8(cpu.get_hl());
    let c = v & 0x80 != 0;
    let v = v.rotate_left(1);
    let z = v == 0;
    mmu.set8(cpu.get_hl(), v);
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(false);
    cpu.set_cf(c);

    (16, 2)
}

#[allow(unused_variables)]
fn op_0xcb07(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = cpu.get_a();
    let c = v & 0x80 != 0;
    let v = v.rotate_left(1);
    let z = v == 0;
    cpu.set_a(v);
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(false);
    cpu.set_cf(c);

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcb08(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = cpu.get_b();
    let c = v & 1 != 0;
    let v = v.rotate_right(1);
    let z = v == 0;
    cpu.set_b(v);
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(false);
    cpu.set_cf(c);

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcb09(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = cpu.get_c();
    let c = v & 1 != 0;
    let v = v.rotate_right(1);
    let z = v == 0;
    cpu.set_c(v);
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(false);
    cpu.set_cf(c);

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcb0a(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = cpu.get_d();
    let c = v & 1 != 0;
    let v = v.rotate_right(1);
    let z = v == 0;
    cpu.set_d(v);
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(false);
    cpu.set_cf(c);

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcb0b(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = cpu.get_e();
    let c = v & 1 != 0;
    let v = v.rotate_right(1);
    let z = v == 0;
    cpu.set_e(v);
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(false);
    cpu.set_cf(c);

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcb0c(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = cpu.get_h();
    let c = v & 1 != 0;
    let v = v.rotate_right(1);
    let z = v == 0;
    cpu.set_h(v);
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(false);
    cpu.set_cf(c);

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcb0d(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = cpu.get_l();
    let c = v & 1 != 0;
    let v = v.rotate_right(1);
    let z = v == 0;
    cpu.set_l(v);
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(false);
    cpu.set_cf(c);

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcb0e(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = mmu.get8(cpu.get_hl());
    let c = v & 1 != 0;
    let v = v.rotate_right(1);
    let z = v == 0;
    mmu.set8(cpu.get_hl(), v);
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(false);
    cpu.set_cf(c);

    (16, 2)
}

#[allow(unused_variables)]
fn op_0xcb0f(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = cpu.get_a();
    let c = v & 1 != 0;
    let v = v.rotate_right(1);
    let z = v == 0;
    cpu.set_a(v);
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(false);
    cpu.set_cf(c);

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcb10(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = cpu.get_b();
    let c = v & 0x80 != 0;
    let v = v.wrapping_shl(1);
    let v = v | if cpu.get_cf() { 1 } else { 0 };
    let z = v == 0;
    cpu.set_b(v);
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(false);
    cpu.set_cf(c);

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcb11(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = cpu.get_c();
    let c = v & 0x80 != 0;
    let v = v.wrapping_shl(1);
    let v = v | if cpu.get_cf() { 1 } else { 0 };
    let z = v == 0;
    cpu.set_c(v);
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(false);
    cpu.set_cf(c);

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcb12(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = cpu.get_d();
    let c = v & 0x80 != 0;
    let v = v.wrapping_shl(1);
    let v = v | if cpu.get_cf() { 1 } else { 0 };
    let z = v == 0;
    cpu.set_d(v);
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(false);
    cpu.set_cf(c);

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcb13(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = cpu.get_e();
    let c = v & 0x80 != 0;
    let v = v.wrapping_shl(1);
    let v = v | if cpu.get_cf() { 1 } else { 0 };
    let z = v == 0;
    cpu.set_e(v);
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(false);
    cpu.set_cf(c);

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcb14(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = cpu.get_h();
    let c = v & 0x80 != 0;
    let v = v.wrapping_shl(1);
    let v = v | if cpu.get_cf() { 1 } else { 0 };
    let z = v == 0;
    cpu.set_h(v);
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(false);
    cpu.set_cf(c);

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcb15(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = cpu.get_l();
    let c = v & 0x80 != 0;
    let v = v.wrapping_shl(1);
    let v = v | if cpu.get_cf() { 1 } else { 0 };
    let z = v == 0;
    cpu.set_l(v);
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(false);
    cpu.set_cf(c);

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcb16(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = mmu.get8(cpu.get_hl());
    let c = v & 0x80 != 0;
    let v = v.wrapping_shl(1);
    let v = v | if cpu.get_cf() { 1 } else { 0 };
    let z = v == 0;
    mmu.set8(cpu.get_hl(), v);
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(false);
    cpu.set_cf(c);

    (16, 2)
}

#[allow(unused_variables)]
fn op_0xcb17(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = cpu.get_a();
    let c = v & 0x80 != 0;
    let v = v.wrapping_shl(1);
    let v = v | if cpu.get_cf() { 1 } else { 0 };
    let z = v == 0;
    cpu.set_a(v);
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(false);
    cpu.set_cf(c);

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcb18(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = cpu.get_b();
    let c = v & 1 != 0;
    let v = v.wrapping_shr(1);
    let v = v | if cpu.get_cf() { 0x80 } else { 0 };
    let z = v == 0;
    cpu.set_b(v);
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(false);
    cpu.set_cf(c);

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcb19(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = cpu.get_c();
    let c = v & 1 != 0;
    let v = v.wrapping_shr(1);
    let v = v | if cpu.get_cf() { 0x80 } else { 0 };
    let z = v == 0;
    cpu.set_c(v);
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(false);
    cpu.set_cf(c);

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcb1a(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = cpu.get_d();
    let c = v & 1 != 0;
    let v = v.wrapping_shr(1);
    let v = v | if cpu.get_cf() { 0x80 } else { 0 };
    let z = v == 0;
    cpu.set_d(v);
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(false);
    cpu.set_cf(c);

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcb1b(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = cpu.get_e();
    let c = v & 1 != 0;
    let v = v.wrapping_shr(1);
    let v = v | if cpu.get_cf() { 0x80 } else { 0 };
    let z = v == 0;
    cpu.set_e(v);
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(false);
    cpu.set_cf(c);

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcb1c(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = cpu.get_h();
    let c = v & 1 != 0;
    let v = v.wrapping_shr(1);
    let v = v | if cpu.get_cf() { 0x80 } else { 0 };
    let z = v == 0;
    cpu.set_h(v);
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(false);
    cpu.set_cf(c);

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcb1d(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = cpu.get_l();
    let c = v & 1 != 0;
    let v = v.wrapping_shr(1);
    let v = v | if cpu.get_cf() { 0x80 } else { 0 };
    let z = v == 0;
    cpu.set_l(v);
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(false);
    cpu.set_cf(c);

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcb1e(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = mmu.get8(cpu.get_hl());
    let c = v & 1 != 0;
    let v = v.wrapping_shr(1);
    let v = v | if cpu.get_cf() { 0x80 } else { 0 };
    let z = v == 0;
    mmu.set8(cpu.get_hl(), v);
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(false);
    cpu.set_cf(c);

    (16, 2)
}

#[allow(unused_variables)]
fn op_0xcb1f(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = cpu.get_a();
    let c = v & 1 != 0;
    let v = v.wrapping_shr(1);
    let v = v | if cpu.get_cf() { 0x80 } else { 0 };
    let z = v == 0;
    cpu.set_a(v);
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(false);
    cpu.set_cf(c);

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcb20(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = cpu.get_b();
    let c = v & 0x80 != 0;
    let v = v.wrapping_shl(1);
    let z = v == 0;
    cpu.set_b(v);
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(false);
    cpu.set_cf(c);

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcb21(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = cpu.get_c();
    let c = v & 0x80 != 0;
    let v = v.wrapping_shl(1);
    let z = v == 0;
    cpu.set_c(v);
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(false);
    cpu.set_cf(c);

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcb22(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = cpu.get_d();
    let c = v & 0x80 != 0;
    let v = v.wrapping_shl(1);
    let z = v == 0;
    cpu.set_d(v);
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(false);
    cpu.set_cf(c);

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcb23(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = cpu.get_e();
    let c = v & 0x80 != 0;
    let v = v.wrapping_shl(1);
    let z = v == 0;
    cpu.set_e(v);
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(false);
    cpu.set_cf(c);

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcb24(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = cpu.get_h();
    let c = v & 0x80 != 0;
    let v = v.wrapping_shl(1);
    let z = v == 0;
    cpu.set_h(v);
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(false);
    cpu.set_cf(c);

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcb25(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = cpu.get_l();
    let c = v & 0x80 != 0;
    let v = v.wrapping_shl(1);
    let z = v == 0;
    cpu.set_l(v);
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(false);
    cpu.set_cf(c);

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcb26(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = mmu.get8(cpu.get_hl());
    let c = v & 0x80 != 0;
    let v = v.wrapping_shl(1);
    let z = v == 0;
    mmu.set8(cpu.get_hl(), v);
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(false);
    cpu.set_cf(c);

    (16, 2)
}

#[allow(unused_variables)]
fn op_0xcb27(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = cpu.get_a();
    let c = v & 0x80 != 0;
    let v = v.wrapping_shl(1);
    let z = v == 0;
    cpu.set_a(v);
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(false);
    cpu.set_cf(c);

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcb28(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = cpu.get_b();
    let c = v & 1 != 0;
    let msb = v & 0x80;
    let v = v.wrapping_shr(1);
    let v = v | msb;
    let z = v == 0;
    cpu.set_b(v);
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(false);
    cpu.set_cf(c);

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcb29(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = cpu.get_c();
    let c = v & 1 != 0;
    let msb = v & 0x80;
    let v = v.wrapping_shr(1);
    let v = v | msb;
    let z = v == 0;
    cpu.set_c(v);
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(false);
    cpu.set_cf(c);

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcb2a(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = cpu.get_d();
    let c = v & 1 != 0;
    let msb = v & 0x80;
    let v = v.wrapping_shr(1);
    let v = v | msb;
    let z = v == 0;
    cpu.set_d(v);
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(false);
    cpu.set_cf(c);

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcb2b(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = cpu.get_e();
    let c = v & 1 != 0;
    let msb = v & 0x80;
    let v = v.wrapping_shr(1);
    let v = v | msb;
    let z = v == 0;
    cpu.set_e(v);
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(false);
    cpu.set_cf(c);

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcb2c(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = cpu.get_h();
    let c = v & 1 != 0;
    let msb = v & 0x80;
    let v = v.wrapping_shr(1);
    let v = v | msb;
    let z = v == 0;
    cpu.set_h(v);
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(false);
    cpu.set_cf(c);

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcb2d(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = cpu.get_l();
    let c = v & 1 != 0;
    let msb = v & 0x80;
    let v = v.wrapping_shr(1);
    let v = v | msb;
    let z = v == 0;
    cpu.set_l(v);
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(false);
    cpu.set_cf(c);

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcb2e(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = mmu.get8(cpu.get_hl());
    let c = v & 1 != 0;
    let msb = v & 0x80;
    let v = v.wrapping_shr(1);
    let v = v | msb;
    let z = v == 0;
    mmu.set8(cpu.get_hl(), v);
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(false);
    cpu.set_cf(c);

    (16, 2)
}

#[allow(unused_variables)]
fn op_0xcb2f(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = cpu.get_a();
    let c = v & 1 != 0;
    let msb = v & 0x80;
    let v = v.wrapping_shr(1);
    let v = v | msb;
    let z = v == 0;
    cpu.set_a(v);
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(false);
    cpu.set_cf(c);

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcb30(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = cpu.get_b();
    let v = v.rotate_left(4);
    cpu.set_b(v);
    let z = v == 0;
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(false);
    cpu.set_cf(false);

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcb31(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = cpu.get_c();
    let v = v.rotate_left(4);
    cpu.set_c(v);
    let z = v == 0;
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(false);
    cpu.set_cf(false);

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcb32(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = cpu.get_d();
    let v = v.rotate_left(4);
    cpu.set_d(v);
    let z = v == 0;
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(false);
    cpu.set_cf(false);

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcb33(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = cpu.get_e();
    let v = v.rotate_left(4);
    cpu.set_e(v);
    let z = v == 0;
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(false);
    cpu.set_cf(false);

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcb34(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = cpu.get_h();
    let v = v.rotate_left(4);
    cpu.set_h(v);
    let z = v == 0;
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(false);
    cpu.set_cf(false);

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcb35(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = cpu.get_l();
    let v = v.rotate_left(4);
    cpu.set_l(v);
    let z = v == 0;
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(false);
    cpu.set_cf(false);

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcb36(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = mmu.get8(cpu.get_hl());
    let v = v.rotate_left(4);
    mmu.set8(cpu.get_hl(), v);
    let z = v == 0;
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(false);
    cpu.set_cf(false);

    (16, 2)
}

#[allow(unused_variables)]
fn op_0xcb37(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = cpu.get_a();
    let v = v.rotate_left(4);
    cpu.set_a(v);
    let z = v == 0;
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(false);
    cpu.set_cf(false);

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcb38(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = cpu.get_b();
    let c = v & 1 != 0;
    let v = v.wrapping_shr(1);
    let z = v == 0;
    cpu.set_b(v);
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(false);
    cpu.set_cf(c);

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcb39(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = cpu.get_c();
    let c = v & 1 != 0;
    let v = v.wrapping_shr(1);
    let z = v == 0;
    cpu.set_c(v);
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(false);
    cpu.set_cf(c);

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcb3a(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = cpu.get_d();
    let c = v & 1 != 0;
    let v = v.wrapping_shr(1);
    let z = v == 0;
    cpu.set_d(v);
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(false);
    cpu.set_cf(c);

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcb3b(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = cpu.get_e();
    let c = v & 1 != 0;
    let v = v.wrapping_shr(1);
    let z = v == 0;
    cpu.set_e(v);
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(false);
    cpu.set_cf(c);

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcb3c(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = cpu.get_h();
    let c = v & 1 != 0;
    let v = v.wrapping_shr(1);
    let z = v == 0;
    cpu.set_h(v);
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(false);
    cpu.set_cf(c);

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcb3d(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = cpu.get_l();
    let c = v & 1 != 0;
    let v = v.wrapping_shr(1);
    let z = v == 0;
    cpu.set_l(v);
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(false);
    cpu.set_cf(c);

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcb3e(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = mmu.get8(cpu.get_hl());
    let c = v & 1 != 0;
    let v = v.wrapping_shr(1);
    let z = v == 0;
    mmu.set8(cpu.get_hl(), v);
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(false);
    cpu.set_cf(c);

    (16, 2)
}

#[allow(unused_variables)]
fn op_0xcb3f(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let v = cpu.get_a();
    let c = v & 1 != 0;
    let v = v.wrapping_shr(1);
    let z = v == 0;
    cpu.set_a(v);
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(false);
    cpu.set_cf(c);

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcb40(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 0;
    let q = cpu.get_b();
    let z = q & (1 << p) == 0;
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(true);

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcb41(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 0;
    let q = cpu.get_c();
    let z = q & (1 << p) == 0;
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(true);

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcb42(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 0;
    let q = cpu.get_d();
    let z = q & (1 << p) == 0;
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(true);

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcb43(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 0;
    let q = cpu.get_e();
    let z = q & (1 << p) == 0;
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(true);

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcb44(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 0;
    let q = cpu.get_h();
    let z = q & (1 << p) == 0;
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(true);

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcb45(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 0;
    let q = cpu.get_l();
    let z = q & (1 << p) == 0;
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(true);

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcb46(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 0;
    let q = mmu.get8(cpu.get_hl());
    let z = q & (1 << p) == 0;
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(true);

    (12, 2)
}

#[allow(unused_variables)]
fn op_0xcb47(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 0;
    let q = cpu.get_a();
    let z = q & (1 << p) == 0;
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(true);

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcb48(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 1;
    let q = cpu.get_b();
    let z = q & (1 << p) == 0;
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(true);

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcb49(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 1;
    let q = cpu.get_c();
    let z = q & (1 << p) == 0;
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(true);

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcb4a(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 1;
    let q = cpu.get_d();
    let z = q & (1 << p) == 0;
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(true);

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcb4b(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 1;
    let q = cpu.get_e();
    let z = q & (1 << p) == 0;
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(true);

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcb4c(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 1;
    let q = cpu.get_h();
    let z = q & (1 << p) == 0;
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(true);

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcb4d(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 1;
    let q = cpu.get_l();
    let z = q & (1 << p) == 0;
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(true);

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcb4e(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 1;
    let q = mmu.get8(cpu.get_hl());
    let z = q & (1 << p) == 0;
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(true);

    (12, 2)
}

#[allow(unused_variables)]
fn op_0xcb4f(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 1;
    let q = cpu.get_a();
    let z = q & (1 << p) == 0;
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(true);

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcb50(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 2;
    let q = cpu.get_b();
    let z = q & (1 << p) == 0;
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(true);

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcb51(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 2;
    let q = cpu.get_c();
    let z = q & (1 << p) == 0;
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(true);

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcb52(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 2;
    let q = cpu.get_d();
    let z = q & (1 << p) == 0;
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(true);

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcb53(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 2;
    let q = cpu.get_e();
    let z = q & (1 << p) == 0;
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(true);

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcb54(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 2;
    let q = cpu.get_h();
    let z = q & (1 << p) == 0;
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(true);

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcb55(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 2;
    let q = cpu.get_l();
    let z = q & (1 << p) == 0;
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(true);

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcb56(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 2;
    let q = mmu.get8(cpu.get_hl());
    let z = q & (1 << p) == 0;
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(true);

    (12, 2)
}

#[allow(unused_variables)]
fn op_0xcb57(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 2;
    let q = cpu.get_a();
    let z = q & (1 << p) == 0;
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(true);

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcb58(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 3;
    let q = cpu.get_b();
    let z = q & (1 << p) == 0;
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(true);

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcb59(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 3;
    let q = cpu.get_c();
    let z = q & (1 << p) == 0;
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(true);

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcb5a(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 3;
    let q = cpu.get_d();
    let z = q & (1 << p) == 0;
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(true);

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcb5b(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 3;
    let q = cpu.get_e();
    let z = q & (1 << p) == 0;
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(true);

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcb5c(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 3;
    let q = cpu.get_h();
    let z = q & (1 << p) == 0;
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(true);

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcb5d(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 3;
    let q = cpu.get_l();
    let z = q & (1 << p) == 0;
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(true);

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcb5e(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 3;
    let q = mmu.get8(cpu.get_hl());
    let z = q & (1 << p) == 0;
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(true);

    (12, 2)
}

#[allow(unused_variables)]
fn op_0xcb5f(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 3;
    let q = cpu.get_a();
    let z = q & (1 << p) == 0;
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(true);

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcb60(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 4;
    let q = cpu.get_b();
    let z = q & (1 << p) == 0;
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(true);

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcb61(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 4;
    let q = cpu.get_c();
    let z = q & (1 << p) == 0;
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(true);

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcb62(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 4;
    let q = cpu.get_d();
    let z = q & (1 << p) == 0;
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(true);

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcb63(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 4;
    let q = cpu.get_e();
    let z = q & (1 << p) == 0;
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(true);

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcb64(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 4;
    let q = cpu.get_h();
    let z = q & (1 << p) == 0;
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(true);

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcb65(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 4;
    let q = cpu.get_l();
    let z = q & (1 << p) == 0;
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(true);

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcb66(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 4;
    let q = mmu.get8(cpu.get_hl());
    let z = q & (1 << p) == 0;
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(true);

    (12, 2)
}

#[allow(unused_variables)]
fn op_0xcb67(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 4;
    let q = cpu.get_a();
    let z = q & (1 << p) == 0;
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(true);

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcb68(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 5;
    let q = cpu.get_b();
    let z = q & (1 << p) == 0;
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(true);

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcb69(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 5;
    let q = cpu.get_c();
    let z = q & (1 << p) == 0;
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(true);

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcb6a(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 5;
    let q = cpu.get_d();
    let z = q & (1 << p) == 0;
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(true);

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcb6b(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 5;
    let q = cpu.get_e();
    let z = q & (1 << p) == 0;
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(true);

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcb6c(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 5;
    let q = cpu.get_h();
    let z = q & (1 << p) == 0;
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(true);

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcb6d(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 5;
    let q = cpu.get_l();
    let z = q & (1 << p) == 0;
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(true);

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcb6e(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 5;
    let q = mmu.get8(cpu.get_hl());
    let z = q & (1 << p) == 0;
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(true);

    (12, 2)
}

#[allow(unused_variables)]
fn op_0xcb6f(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 5;
    let q = cpu.get_a();
    let z = q & (1 << p) == 0;
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(true);

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcb70(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 6;
    let q = cpu.get_b();
    let z = q & (1 << p) == 0;
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(true);

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcb71(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 6;
    let q = cpu.get_c();
    let z = q & (1 << p) == 0;
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(true);

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcb72(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 6;
    let q = cpu.get_d();
    let z = q & (1 << p) == 0;
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(true);

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcb73(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 6;
    let q = cpu.get_e();
    let z = q & (1 << p) == 0;
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(true);

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcb74(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 6;
    let q = cpu.get_h();
    let z = q & (1 << p) == 0;
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(true);

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcb75(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 6;
    let q = cpu.get_l();
    let z = q & (1 << p) == 0;
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(true);

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcb76(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 6;
    let q = mmu.get8(cpu.get_hl());
    let z = q & (1 << p) == 0;
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(true);

    (12, 2)
}

#[allow(unused_variables)]
fn op_0xcb77(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 6;
    let q = cpu.get_a();
    let z = q & (1 << p) == 0;
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(true);

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcb78(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 7;
    let q = cpu.get_b();
    let z = q & (1 << p) == 0;
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(true);

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcb79(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 7;
    let q = cpu.get_c();
    let z = q & (1 << p) == 0;
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(true);

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcb7a(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 7;
    let q = cpu.get_d();
    let z = q & (1 << p) == 0;
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(true);

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcb7b(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 7;
    let q = cpu.get_e();
    let z = q & (1 << p) == 0;
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(true);

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcb7c(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 7;
    let q = cpu.get_h();
    let z = q & (1 << p) == 0;
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(true);

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcb7d(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 7;
    let q = cpu.get_l();
    let z = q & (1 << p) == 0;
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(true);

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcb7e(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 7;
    let q = mmu.get8(cpu.get_hl());
    let z = q & (1 << p) == 0;
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(true);

    (12, 2)
}

#[allow(unused_variables)]
fn op_0xcb7f(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 7;
    let q = cpu.get_a();
    let z = q & (1 << p) == 0;
    cpu.set_zf(z);
    cpu.set_nf(false);
    cpu.set_hf(true);

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcb80(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 0;
    let q = cpu.get_b();
    cpu.set_b(q & !(1 << p));

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcb81(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 0;
    let q = cpu.get_c();
    cpu.set_c(q & !(1 << p));

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcb82(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 0;
    let q = cpu.get_d();
    cpu.set_d(q & !(1 << p));

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcb83(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 0;
    let q = cpu.get_e();
    cpu.set_e(q & !(1 << p));

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcb84(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 0;
    let q = cpu.get_h();
    cpu.set_h(q & !(1 << p));

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcb85(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 0;
    let q = cpu.get_l();
    cpu.set_l(q & !(1 << p));

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcb86(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 0;
    let q = mmu.get8(cpu.get_hl());
    mmu.set8(cpu.get_hl(), q & !(1 << p));

    (16, 2)
}

#[allow(unused_variables)]
fn op_0xcb87(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 0;
    let q = cpu.get_a();
    cpu.set_a(q & !(1 << p));

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcb88(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 1;
    let q = cpu.get_b();
    cpu.set_b(q & !(1 << p));

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcb89(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 1;
    let q = cpu.get_c();
    cpu.set_c(q & !(1 << p));

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcb8a(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 1;
    let q = cpu.get_d();
    cpu.set_d(q & !(1 << p));

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcb8b(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 1;
    let q = cpu.get_e();
    cpu.set_e(q & !(1 << p));

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcb8c(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 1;
    let q = cpu.get_h();
    cpu.set_h(q & !(1 << p));

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcb8d(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 1;
    let q = cpu.get_l();
    cpu.set_l(q & !(1 << p));

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcb8e(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 1;
    let q = mmu.get8(cpu.get_hl());
    mmu.set8(cpu.get_hl(), q & !(1 << p));

    (16, 2)
}

#[allow(unused_variables)]
fn op_0xcb8f(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 1;
    let q = cpu.get_a();
    cpu.set_a(q & !(1 << p));

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcb90(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 2;
    let q = cpu.get_b();
    cpu.set_b(q & !(1 << p));

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcb91(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 2;
    let q = cpu.get_c();
    cpu.set_c(q & !(1 << p));

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcb92(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 2;
    let q = cpu.get_d();
    cpu.set_d(q & !(1 << p));

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcb93(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 2;
    let q = cpu.get_e();
    cpu.set_e(q & !(1 << p));

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcb94(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 2;
    let q = cpu.get_h();
    cpu.set_h(q & !(1 << p));

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcb95(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 2;
    let q = cpu.get_l();
    cpu.set_l(q & !(1 << p));

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcb96(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 2;
    let q = mmu.get8(cpu.get_hl());
    mmu.set8(cpu.get_hl(), q & !(1 << p));

    (16, 2)
}

#[allow(unused_variables)]
fn op_0xcb97(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 2;
    let q = cpu.get_a();
    cpu.set_a(q & !(1 << p));

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcb98(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 3;
    let q = cpu.get_b();
    cpu.set_b(q & !(1 << p));

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcb99(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 3;
    let q = cpu.get_c();
    cpu.set_c(q & !(1 << p));

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcb9a(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 3;
    let q = cpu.get_d();
    cpu.set_d(q & !(1 << p));

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcb9b(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 3;
    let q = cpu.get_e();
    cpu.set_e(q & !(1 << p));

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcb9c(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 3;
    let q = cpu.get_h();
    cpu.set_h(q & !(1 << p));

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcb9d(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 3;
    let q = cpu.get_l();
    cpu.set_l(q & !(1 << p));

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcb9e(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 3;
    let q = mmu.get8(cpu.get_hl());
    mmu.set8(cpu.get_hl(), q & !(1 << p));

    (16, 2)
}

#[allow(unused_variables)]
fn op_0xcb9f(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 3;
    let q = cpu.get_a();
    cpu.set_a(q & !(1 << p));

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcba0(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 4;
    let q = cpu.get_b();
    cpu.set_b(q & !(1 << p));

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcba1(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 4;
    let q = cpu.get_c();
    cpu.set_c(q & !(1 << p));

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcba2(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 4;
    let q = cpu.get_d();
    cpu.set_d(q & !(1 << p));

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcba3(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 4;
    let q = cpu.get_e();
    cpu.set_e(q & !(1 << p));

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcba4(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 4;
    let q = cpu.get_h();
    cpu.set_h(q & !(1 << p));

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcba5(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 4;
    let q = cpu.get_l();
    cpu.set_l(q & !(1 << p));

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcba6(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 4;
    let q = mmu.get8(cpu.get_hl());
    mmu.set8(cpu.get_hl(), q & !(1 << p));

    (16, 2)
}

#[allow(unused_variables)]
fn op_0xcba7(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 4;
    let q = cpu.get_a();
    cpu.set_a(q & !(1 << p));

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcba8(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 5;
    let q = cpu.get_b();
    cpu.set_b(q & !(1 << p));

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcba9(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 5;
    let q = cpu.get_c();
    cpu.set_c(q & !(1 << p));

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcbaa(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 5;
    let q = cpu.get_d();
    cpu.set_d(q & !(1 << p));

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcbab(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 5;
    let q = cpu.get_e();
    cpu.set_e(q & !(1 << p));

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcbac(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 5;
    let q = cpu.get_h();
    cpu.set_h(q & !(1 << p));

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcbad(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 5;
    let q = cpu.get_l();
    cpu.set_l(q & !(1 << p));

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcbae(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 5;
    let q = mmu.get8(cpu.get_hl());
    mmu.set8(cpu.get_hl(), q & !(1 << p));

    (16, 2)
}

#[allow(unused_variables)]
fn op_0xcbaf(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 5;
    let q = cpu.get_a();
    cpu.set_a(q & !(1 << p));

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcbb0(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 6;
    let q = cpu.get_b();
    cpu.set_b(q & !(1 << p));

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcbb1(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 6;
    let q = cpu.get_c();
    cpu.set_c(q & !(1 << p));

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcbb2(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 6;
    let q = cpu.get_d();
    cpu.set_d(q & !(1 << p));

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcbb3(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 6;
    let q = cpu.get_e();
    cpu.set_e(q & !(1 << p));

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcbb4(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 6;
    let q = cpu.get_h();
    cpu.set_h(q & !(1 << p));

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcbb5(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 6;
    let q = cpu.get_l();
    cpu.set_l(q & !(1 << p));

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcbb6(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 6;
    let q = mmu.get8(cpu.get_hl());
    mmu.set8(cpu.get_hl(), q & !(1 << p));

    (16, 2)
}

#[allow(unused_variables)]
fn op_0xcbb7(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 6;
    let q = cpu.get_a();
    cpu.set_a(q & !(1 << p));

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcbb8(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 7;
    let q = cpu.get_b();
    cpu.set_b(q & !(1 << p));

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcbb9(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 7;
    let q = cpu.get_c();
    cpu.set_c(q & !(1 << p));

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcbba(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 7;
    let q = cpu.get_d();
    cpu.set_d(q & !(1 << p));

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcbbb(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 7;
    let q = cpu.get_e();
    cpu.set_e(q & !(1 << p));

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcbbc(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 7;
    let q = cpu.get_h();
    cpu.set_h(q & !(1 << p));

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcbbd(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 7;
    let q = cpu.get_l();
    cpu.set_l(q & !(1 << p));

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcbbe(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 7;
    let q = mmu.get8(cpu.get_hl());
    mmu.set8(cpu.get_hl(), q & !(1 << p));

    (16, 2)
}

#[allow(unused_variables)]
fn op_0xcbbf(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 7;
    let q = cpu.get_a();
    cpu.set_a(q & !(1 << p));

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcbc0(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 0;
    let q = cpu.get_b();
    cpu.set_b(q | (1 << p));

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcbc1(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 0;
    let q = cpu.get_c();
    cpu.set_c(q | (1 << p));

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcbc2(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 0;
    let q = cpu.get_d();
    cpu.set_d(q | (1 << p));

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcbc3(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 0;
    let q = cpu.get_e();
    cpu.set_e(q | (1 << p));

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcbc4(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 0;
    let q = cpu.get_h();
    cpu.set_h(q | (1 << p));

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcbc5(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 0;
    let q = cpu.get_l();
    cpu.set_l(q | (1 << p));

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcbc6(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 0;
    let q = mmu.get8(cpu.get_hl());
    mmu.set8(cpu.get_hl(), q | (1 << p));

    (16, 2)
}

#[allow(unused_variables)]
fn op_0xcbc7(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 0;
    let q = cpu.get_a();
    cpu.set_a(q | (1 << p));

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcbc8(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 1;
    let q = cpu.get_b();
    cpu.set_b(q | (1 << p));

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcbc9(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 1;
    let q = cpu.get_c();
    cpu.set_c(q | (1 << p));

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcbca(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 1;
    let q = cpu.get_d();
    cpu.set_d(q | (1 << p));

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcbcb(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 1;
    let q = cpu.get_e();
    cpu.set_e(q | (1 << p));

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcbcc(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 1;
    let q = cpu.get_h();
    cpu.set_h(q | (1 << p));

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcbcd(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 1;
    let q = cpu.get_l();
    cpu.set_l(q | (1 << p));

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcbce(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 1;
    let q = mmu.get8(cpu.get_hl());
    mmu.set8(cpu.get_hl(), q | (1 << p));

    (16, 2)
}

#[allow(unused_variables)]
fn op_0xcbcf(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 1;
    let q = cpu.get_a();
    cpu.set_a(q | (1 << p));

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcbd0(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 2;
    let q = cpu.get_b();
    cpu.set_b(q | (1 << p));

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcbd1(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 2;
    let q = cpu.get_c();
    cpu.set_c(q | (1 << p));

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcbd2(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 2;
    let q = cpu.get_d();
    cpu.set_d(q | (1 << p));

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcbd3(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 2;
    let q = cpu.get_e();
    cpu.set_e(q | (1 << p));

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcbd4(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 2;
    let q = cpu.get_h();
    cpu.set_h(q | (1 << p));

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcbd5(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 2;
    let q = cpu.get_l();
    cpu.set_l(q | (1 << p));

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcbd6(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 2;
    let q = mmu.get8(cpu.get_hl());
    mmu.set8(cpu.get_hl(), q | (1 << p));

    (16, 2)
}

#[allow(unused_variables)]
fn op_0xcbd7(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 2;
    let q = cpu.get_a();
    cpu.set_a(q | (1 << p));

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcbd8(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 3;
    let q = cpu.get_b();
    cpu.set_b(q | (1 << p));

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcbd9(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 3;
    let q = cpu.get_c();
    cpu.set_c(q | (1 << p));

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcbda(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 3;
    let q = cpu.get_d();
    cpu.set_d(q | (1 << p));

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcbdb(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 3;
    let q = cpu.get_e();
    cpu.set_e(q | (1 << p));

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcbdc(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 3;
    let q = cpu.get_h();
    cpu.set_h(q | (1 << p));

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcbdd(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 3;
    let q = cpu.get_l();
    cpu.set_l(q | (1 << p));

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcbde(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 3;
    let q = mmu.get8(cpu.get_hl());
    mmu.set8(cpu.get_hl(), q | (1 << p));

    (16, 2)
}

#[allow(unused_variables)]
fn op_0xcbdf(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 3;
    let q = cpu.get_a();
    cpu.set_a(q | (1 << p));

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcbe0(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 4;
    let q = cpu.get_b();
    cpu.set_b(q | (1 << p));

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcbe1(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 4;
    let q = cpu.get_c();
    cpu.set_c(q | (1 << p));

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcbe2(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 4;
    let q = cpu.get_d();
    cpu.set_d(q | (1 << p));

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcbe3(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 4;
    let q = cpu.get_e();
    cpu.set_e(q | (1 << p));

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcbe4(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 4;
    let q = cpu.get_h();
    cpu.set_h(q | (1 << p));

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcbe5(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 4;
    let q = cpu.get_l();
    cpu.set_l(q | (1 << p));

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcbe6(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 4;
    let q = mmu.get8(cpu.get_hl());
    mmu.set8(cpu.get_hl(), q | (1 << p));

    (16, 2)
}

#[allow(unused_variables)]
fn op_0xcbe7(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 4;
    let q = cpu.get_a();
    cpu.set_a(q | (1 << p));

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcbe8(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 5;
    let q = cpu.get_b();
    cpu.set_b(q | (1 << p));

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcbe9(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 5;
    let q = cpu.get_c();
    cpu.set_c(q | (1 << p));

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcbea(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 5;
    let q = cpu.get_d();
    cpu.set_d(q | (1 << p));

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcbeb(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 5;
    let q = cpu.get_e();
    cpu.set_e(q | (1 << p));

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcbec(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 5;
    let q = cpu.get_h();
    cpu.set_h(q | (1 << p));

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcbed(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 5;
    let q = cpu.get_l();
    cpu.set_l(q | (1 << p));

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcbee(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 5;
    let q = mmu.get8(cpu.get_hl());
    mmu.set8(cpu.get_hl(), q | (1 << p));

    (16, 2)
}

#[allow(unused_variables)]
fn op_0xcbef(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 5;
    let q = cpu.get_a();
    cpu.set_a(q | (1 << p));

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcbf0(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 6;
    let q = cpu.get_b();
    cpu.set_b(q | (1 << p));

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcbf1(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 6;
    let q = cpu.get_c();
    cpu.set_c(q | (1 << p));

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcbf2(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 6;
    let q = cpu.get_d();
    cpu.set_d(q | (1 << p));

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcbf3(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 6;
    let q = cpu.get_e();
    cpu.set_e(q | (1 << p));

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcbf4(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 6;
    let q = cpu.get_h();
    cpu.set_h(q | (1 << p));

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcbf5(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 6;
    let q = cpu.get_l();
    cpu.set_l(q | (1 << p));

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcbf6(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 6;
    let q = mmu.get8(cpu.get_hl());
    mmu.set8(cpu.get_hl(), q | (1 << p));

    (16, 2)
}

#[allow(unused_variables)]
fn op_0xcbf7(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 6;
    let q = cpu.get_a();
    cpu.set_a(q | (1 << p));

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcbf8(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 7;
    let q = cpu.get_b();
    cpu.set_b(q | (1 << p));

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcbf9(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 7;
    let q = cpu.get_c();
    cpu.set_c(q | (1 << p));

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcbfa(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 7;
    let q = cpu.get_d();
    cpu.set_d(q | (1 << p));

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcbfb(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 7;
    let q = cpu.get_e();
    cpu.set_e(q | (1 << p));

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcbfc(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 7;
    let q = cpu.get_h();
    cpu.set_h(q | (1 << p));

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcbfd(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 7;
    let q = cpu.get_l();
    cpu.set_l(q | (1 << p));

    (8, 2)
}

#[allow(unused_variables)]
fn op_0xcbfe(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 7;
    let q = mmu.get8(cpu.get_hl());
    mmu.set8(cpu.get_hl(), q | (1 << p));

    (16, 2)
}

#[allow(unused_variables)]
fn op_0xcbff(arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    let p = 7;
    let q = cpu.get_a();
    cpu.set_a(q | (1 << p));

    (8, 2)
}

pub fn decode(code: u16, arg: u16, cpu: &mut Cpu, mmu: &mut Mmu) -> (usize, usize) {
    match code {
        0x0000 => op_0x0000(arg, cpu, mmu),
        0x0001 => op_0x0001(arg, cpu, mmu),
        0x0002 => op_0x0002(arg, cpu, mmu),
        0x0003 => op_0x0003(arg, cpu, mmu),
        0x0004 => op_0x0004(arg, cpu, mmu),
        0x0005 => op_0x0005(arg, cpu, mmu),
        0x0006 => op_0x0006(arg, cpu, mmu),
        0x0007 => op_0x0007(arg, cpu, mmu),
        0x0008 => op_0x0008(arg, cpu, mmu),
        0x0009 => op_0x0009(arg, cpu, mmu),
        0x000A => op_0x000a(arg, cpu, mmu),
        0x000B => op_0x000b(arg, cpu, mmu),
        0x000C => op_0x000c(arg, cpu, mmu),
        0x000D => op_0x000d(arg, cpu, mmu),
        0x000E => op_0x000e(arg, cpu, mmu),
        0x000F => op_0x000f(arg, cpu, mmu),
        0x0010 => op_0x0010(arg, cpu, mmu),
        0x0011 => op_0x0011(arg, cpu, mmu),
        0x0012 => op_0x0012(arg, cpu, mmu),
        0x0013 => op_0x0013(arg, cpu, mmu),
        0x0014 => op_0x0014(arg, cpu, mmu),
        0x0015 => op_0x0015(arg, cpu, mmu),
        0x0016 => op_0x0016(arg, cpu, mmu),
        0x0017 => op_0x0017(arg, cpu, mmu),
        0x0018 => op_0x0018(arg, cpu, mmu),
        0x0019 => op_0x0019(arg, cpu, mmu),
        0x001A => op_0x001a(arg, cpu, mmu),
        0x001B => op_0x001b(arg, cpu, mmu),
        0x001C => op_0x001c(arg, cpu, mmu),
        0x001D => op_0x001d(arg, cpu, mmu),
        0x001E => op_0x001e(arg, cpu, mmu),
        0x001F => op_0x001f(arg, cpu, mmu),
        0x0020 => op_0x0020(arg, cpu, mmu),
        0x0021 => op_0x0021(arg, cpu, mmu),
        0x0022 => op_0x0022(arg, cpu, mmu),
        0x0023 => op_0x0023(arg, cpu, mmu),
        0x0024 => op_0x0024(arg, cpu, mmu),
        0x0025 => op_0x0025(arg, cpu, mmu),
        0x0026 => op_0x0026(arg, cpu, mmu),
        0x0027 => op_0x0027(arg, cpu, mmu),
        0x0028 => op_0x0028(arg, cpu, mmu),
        0x0029 => op_0x0029(arg, cpu, mmu),
        0x002A => op_0x002a(arg, cpu, mmu),
        0x002B => op_0x002b(arg, cpu, mmu),
        0x002C => op_0x002c(arg, cpu, mmu),
        0x002D => op_0x002d(arg, cpu, mmu),
        0x002E => op_0x002e(arg, cpu, mmu),
        0x002F => op_0x002f(arg, cpu, mmu),
        0x0030 => op_0x0030(arg, cpu, mmu),
        0x0031 => op_0x0031(arg, cpu, mmu),
        0x0032 => op_0x0032(arg, cpu, mmu),
        0x0033 => op_0x0033(arg, cpu, mmu),
        0x0034 => op_0x0034(arg, cpu, mmu),
        0x0035 => op_0x0035(arg, cpu, mmu),
        0x0036 => op_0x0036(arg, cpu, mmu),
        0x0037 => op_0x0037(arg, cpu, mmu),
        0x0038 => op_0x0038(arg, cpu, mmu),
        0x0039 => op_0x0039(arg, cpu, mmu),
        0x003A => op_0x003a(arg, cpu, mmu),
        0x003B => op_0x003b(arg, cpu, mmu),
        0x003C => op_0x003c(arg, cpu, mmu),
        0x003D => op_0x003d(arg, cpu, mmu),
        0x003E => op_0x003e(arg, cpu, mmu),
        0x003F => op_0x003f(arg, cpu, mmu),
        0x0040 => op_0x0040(arg, cpu, mmu),
        0x0041 => op_0x0041(arg, cpu, mmu),
        0x0042 => op_0x0042(arg, cpu, mmu),
        0x0043 => op_0x0043(arg, cpu, mmu),
        0x0044 => op_0x0044(arg, cpu, mmu),
        0x0045 => op_0x0045(arg, cpu, mmu),
        0x0046 => op_0x0046(arg, cpu, mmu),
        0x0047 => op_0x0047(arg, cpu, mmu),
        0x0048 => op_0x0048(arg, cpu, mmu),
        0x0049 => op_0x0049(arg, cpu, mmu),
        0x004A => op_0x004a(arg, cpu, mmu),
        0x004B => op_0x004b(arg, cpu, mmu),
        0x004C => op_0x004c(arg, cpu, mmu),
        0x004D => op_0x004d(arg, cpu, mmu),
        0x004E => op_0x004e(arg, cpu, mmu),
        0x004F => op_0x004f(arg, cpu, mmu),
        0x0050 => op_0x0050(arg, cpu, mmu),
        0x0051 => op_0x0051(arg, cpu, mmu),
        0x0052 => op_0x0052(arg, cpu, mmu),
        0x0053 => op_0x0053(arg, cpu, mmu),
        0x0054 => op_0x0054(arg, cpu, mmu),
        0x0055 => op_0x0055(arg, cpu, mmu),
        0x0056 => op_0x0056(arg, cpu, mmu),
        0x0057 => op_0x0057(arg, cpu, mmu),
        0x0058 => op_0x0058(arg, cpu, mmu),
        0x0059 => op_0x0059(arg, cpu, mmu),
        0x005A => op_0x005a(arg, cpu, mmu),
        0x005B => op_0x005b(arg, cpu, mmu),
        0x005C => op_0x005c(arg, cpu, mmu),
        0x005D => op_0x005d(arg, cpu, mmu),
        0x005E => op_0x005e(arg, cpu, mmu),
        0x005F => op_0x005f(arg, cpu, mmu),
        0x0060 => op_0x0060(arg, cpu, mmu),
        0x0061 => op_0x0061(arg, cpu, mmu),
        0x0062 => op_0x0062(arg, cpu, mmu),
        0x0063 => op_0x0063(arg, cpu, mmu),
        0x0064 => op_0x0064(arg, cpu, mmu),
        0x0065 => op_0x0065(arg, cpu, mmu),
        0x0066 => op_0x0066(arg, cpu, mmu),
        0x0067 => op_0x0067(arg, cpu, mmu),
        0x0068 => op_0x0068(arg, cpu, mmu),
        0x0069 => op_0x0069(arg, cpu, mmu),
        0x006A => op_0x006a(arg, cpu, mmu),
        0x006B => op_0x006b(arg, cpu, mmu),
        0x006C => op_0x006c(arg, cpu, mmu),
        0x006D => op_0x006d(arg, cpu, mmu),
        0x006E => op_0x006e(arg, cpu, mmu),
        0x006F => op_0x006f(arg, cpu, mmu),
        0x0070 => op_0x0070(arg, cpu, mmu),
        0x0071 => op_0x0071(arg, cpu, mmu),
        0x0072 => op_0x0072(arg, cpu, mmu),
        0x0073 => op_0x0073(arg, cpu, mmu),
        0x0074 => op_0x0074(arg, cpu, mmu),
        0x0075 => op_0x0075(arg, cpu, mmu),
        0x0076 => op_0x0076(arg, cpu, mmu),
        0x0077 => op_0x0077(arg, cpu, mmu),
        0x0078 => op_0x0078(arg, cpu, mmu),
        0x0079 => op_0x0079(arg, cpu, mmu),
        0x007A => op_0x007a(arg, cpu, mmu),
        0x007B => op_0x007b(arg, cpu, mmu),
        0x007C => op_0x007c(arg, cpu, mmu),
        0x007D => op_0x007d(arg, cpu, mmu),
        0x007E => op_0x007e(arg, cpu, mmu),
        0x007F => op_0x007f(arg, cpu, mmu),
        0x0080 => op_0x0080(arg, cpu, mmu),
        0x0081 => op_0x0081(arg, cpu, mmu),
        0x0082 => op_0x0082(arg, cpu, mmu),
        0x0083 => op_0x0083(arg, cpu, mmu),
        0x0084 => op_0x0084(arg, cpu, mmu),
        0x0085 => op_0x0085(arg, cpu, mmu),
        0x0086 => op_0x0086(arg, cpu, mmu),
        0x0087 => op_0x0087(arg, cpu, mmu),
        0x0088 => op_0x0088(arg, cpu, mmu),
        0x0089 => op_0x0089(arg, cpu, mmu),
        0x008A => op_0x008a(arg, cpu, mmu),
        0x008B => op_0x008b(arg, cpu, mmu),
        0x008C => op_0x008c(arg, cpu, mmu),
        0x008D => op_0x008d(arg, cpu, mmu),
        0x008E => op_0x008e(arg, cpu, mmu),
        0x008F => op_0x008f(arg, cpu, mmu),
        0x0090 => op_0x0090(arg, cpu, mmu),
        0x0091 => op_0x0091(arg, cpu, mmu),
        0x0092 => op_0x0092(arg, cpu, mmu),
        0x0093 => op_0x0093(arg, cpu, mmu),
        0x0094 => op_0x0094(arg, cpu, mmu),
        0x0095 => op_0x0095(arg, cpu, mmu),
        0x0096 => op_0x0096(arg, cpu, mmu),
        0x0097 => op_0x0097(arg, cpu, mmu),
        0x0098 => op_0x0098(arg, cpu, mmu),
        0x0099 => op_0x0099(arg, cpu, mmu),
        0x009A => op_0x009a(arg, cpu, mmu),
        0x009B => op_0x009b(arg, cpu, mmu),
        0x009C => op_0x009c(arg, cpu, mmu),
        0x009D => op_0x009d(arg, cpu, mmu),
        0x009E => op_0x009e(arg, cpu, mmu),
        0x009F => op_0x009f(arg, cpu, mmu),
        0x00A0 => op_0x00a0(arg, cpu, mmu),
        0x00A1 => op_0x00a1(arg, cpu, mmu),
        0x00A2 => op_0x00a2(arg, cpu, mmu),
        0x00A3 => op_0x00a3(arg, cpu, mmu),
        0x00A4 => op_0x00a4(arg, cpu, mmu),
        0x00A5 => op_0x00a5(arg, cpu, mmu),
        0x00A6 => op_0x00a6(arg, cpu, mmu),
        0x00A7 => op_0x00a7(arg, cpu, mmu),
        0x00A8 => op_0x00a8(arg, cpu, mmu),
        0x00A9 => op_0x00a9(arg, cpu, mmu),
        0x00AA => op_0x00aa(arg, cpu, mmu),
        0x00AB => op_0x00ab(arg, cpu, mmu),
        0x00AC => op_0x00ac(arg, cpu, mmu),
        0x00AD => op_0x00ad(arg, cpu, mmu),
        0x00AE => op_0x00ae(arg, cpu, mmu),
        0x00AF => op_0x00af(arg, cpu, mmu),
        0x00B0 => op_0x00b0(arg, cpu, mmu),
        0x00B1 => op_0x00b1(arg, cpu, mmu),
        0x00B2 => op_0x00b2(arg, cpu, mmu),
        0x00B3 => op_0x00b3(arg, cpu, mmu),
        0x00B4 => op_0x00b4(arg, cpu, mmu),
        0x00B5 => op_0x00b5(arg, cpu, mmu),
        0x00B6 => op_0x00b6(arg, cpu, mmu),
        0x00B7 => op_0x00b7(arg, cpu, mmu),
        0x00B8 => op_0x00b8(arg, cpu, mmu),
        0x00B9 => op_0x00b9(arg, cpu, mmu),
        0x00BA => op_0x00ba(arg, cpu, mmu),
        0x00BB => op_0x00bb(arg, cpu, mmu),
        0x00BC => op_0x00bc(arg, cpu, mmu),
        0x00BD => op_0x00bd(arg, cpu, mmu),
        0x00BE => op_0x00be(arg, cpu, mmu),
        0x00BF => op_0x00bf(arg, cpu, mmu),
        0x00C0 => op_0x00c0(arg, cpu, mmu),
        0x00C1 => op_0x00c1(arg, cpu, mmu),
        0x00C2 => op_0x00c2(arg, cpu, mmu),
        0x00C3 => op_0x00c3(arg, cpu, mmu),
        0x00C4 => op_0x00c4(arg, cpu, mmu),
        0x00C5 => op_0x00c5(arg, cpu, mmu),
        0x00C6 => op_0x00c6(arg, cpu, mmu),
        0x00C7 => op_0x00c7(arg, cpu, mmu),
        0x00C8 => op_0x00c8(arg, cpu, mmu),
        0x00C9 => op_0x00c9(arg, cpu, mmu),
        0x00CA => op_0x00ca(arg, cpu, mmu),
        0x00CB => op_0x00cb(arg, cpu, mmu),
        0x00CC => op_0x00cc(arg, cpu, mmu),
        0x00CD => op_0x00cd(arg, cpu, mmu),
        0x00CE => op_0x00ce(arg, cpu, mmu),
        0x00CF => op_0x00cf(arg, cpu, mmu),
        0x00D0 => op_0x00d0(arg, cpu, mmu),
        0x00D1 => op_0x00d1(arg, cpu, mmu),
        0x00D2 => op_0x00d2(arg, cpu, mmu),
        0x00D4 => op_0x00d4(arg, cpu, mmu),
        0x00D5 => op_0x00d5(arg, cpu, mmu),
        0x00D6 => op_0x00d6(arg, cpu, mmu),
        0x00D7 => op_0x00d7(arg, cpu, mmu),
        0x00D8 => op_0x00d8(arg, cpu, mmu),
        0x00D9 => op_0x00d9(arg, cpu, mmu),
        0x00DA => op_0x00da(arg, cpu, mmu),
        0x00DC => op_0x00dc(arg, cpu, mmu),
        0x00DE => op_0x00de(arg, cpu, mmu),
        0x00DF => op_0x00df(arg, cpu, mmu),
        0x00E0 => op_0x00e0(arg, cpu, mmu),
        0x00E1 => op_0x00e1(arg, cpu, mmu),
        0x00E2 => op_0x00e2(arg, cpu, mmu),
        0x00E5 => op_0x00e5(arg, cpu, mmu),
        0x00E6 => op_0x00e6(arg, cpu, mmu),
        0x00E7 => op_0x00e7(arg, cpu, mmu),
        0x00E8 => op_0x00e8(arg, cpu, mmu),
        0x00E9 => op_0x00e9(arg, cpu, mmu),
        0x00EA => op_0x00ea(arg, cpu, mmu),
        0x00EE => op_0x00ee(arg, cpu, mmu),
        0x00EF => op_0x00ef(arg, cpu, mmu),
        0x00F0 => op_0x00f0(arg, cpu, mmu),
        0x00F1 => op_0x00f1(arg, cpu, mmu),
        0x00F2 => op_0x00f2(arg, cpu, mmu),
        0x00F3 => op_0x00f3(arg, cpu, mmu),
        0x00F5 => op_0x00f5(arg, cpu, mmu),
        0x00F6 => op_0x00f6(arg, cpu, mmu),
        0x00F7 => op_0x00f7(arg, cpu, mmu),
        0x00F8 => op_0x00f8(arg, cpu, mmu),
        0x00F9 => op_0x00f9(arg, cpu, mmu),
        0x00FA => op_0x00fa(arg, cpu, mmu),
        0x00FB => op_0x00fb(arg, cpu, mmu),
        0x00FE => op_0x00fe(arg, cpu, mmu),
        0x00FF => op_0x00ff(arg, cpu, mmu),
        0xcb00 => op_0xcb00(arg, cpu, mmu),
        0xcb01 => op_0xcb01(arg, cpu, mmu),
        0xcb02 => op_0xcb02(arg, cpu, mmu),
        0xcb03 => op_0xcb03(arg, cpu, mmu),
        0xcb04 => op_0xcb04(arg, cpu, mmu),
        0xcb05 => op_0xcb05(arg, cpu, mmu),
        0xcb06 => op_0xcb06(arg, cpu, mmu),
        0xcb07 => op_0xcb07(arg, cpu, mmu),
        0xcb08 => op_0xcb08(arg, cpu, mmu),
        0xcb09 => op_0xcb09(arg, cpu, mmu),
        0xcb0A => op_0xcb0a(arg, cpu, mmu),
        0xcb0B => op_0xcb0b(arg, cpu, mmu),
        0xcb0C => op_0xcb0c(arg, cpu, mmu),
        0xcb0D => op_0xcb0d(arg, cpu, mmu),
        0xcb0E => op_0xcb0e(arg, cpu, mmu),
        0xcb0F => op_0xcb0f(arg, cpu, mmu),
        0xcb10 => op_0xcb10(arg, cpu, mmu),
        0xcb11 => op_0xcb11(arg, cpu, mmu),
        0xcb12 => op_0xcb12(arg, cpu, mmu),
        0xcb13 => op_0xcb13(arg, cpu, mmu),
        0xcb14 => op_0xcb14(arg, cpu, mmu),
        0xcb15 => op_0xcb15(arg, cpu, mmu),
        0xcb16 => op_0xcb16(arg, cpu, mmu),
        0xcb17 => op_0xcb17(arg, cpu, mmu),
        0xcb18 => op_0xcb18(arg, cpu, mmu),
        0xcb19 => op_0xcb19(arg, cpu, mmu),
        0xcb1A => op_0xcb1a(arg, cpu, mmu),
        0xcb1B => op_0xcb1b(arg, cpu, mmu),
        0xcb1C => op_0xcb1c(arg, cpu, mmu),
        0xcb1D => op_0xcb1d(arg, cpu, mmu),
        0xcb1E => op_0xcb1e(arg, cpu, mmu),
        0xcb1F => op_0xcb1f(arg, cpu, mmu),
        0xcb20 => op_0xcb20(arg, cpu, mmu),
        0xcb21 => op_0xcb21(arg, cpu, mmu),
        0xcb22 => op_0xcb22(arg, cpu, mmu),
        0xcb23 => op_0xcb23(arg, cpu, mmu),
        0xcb24 => op_0xcb24(arg, cpu, mmu),
        0xcb25 => op_0xcb25(arg, cpu, mmu),
        0xcb26 => op_0xcb26(arg, cpu, mmu),
        0xcb27 => op_0xcb27(arg, cpu, mmu),
        0xcb28 => op_0xcb28(arg, cpu, mmu),
        0xcb29 => op_0xcb29(arg, cpu, mmu),
        0xcb2A => op_0xcb2a(arg, cpu, mmu),
        0xcb2B => op_0xcb2b(arg, cpu, mmu),
        0xcb2C => op_0xcb2c(arg, cpu, mmu),
        0xcb2D => op_0xcb2d(arg, cpu, mmu),
        0xcb2E => op_0xcb2e(arg, cpu, mmu),
        0xcb2F => op_0xcb2f(arg, cpu, mmu),
        0xcb30 => op_0xcb30(arg, cpu, mmu),
        0xcb31 => op_0xcb31(arg, cpu, mmu),
        0xcb32 => op_0xcb32(arg, cpu, mmu),
        0xcb33 => op_0xcb33(arg, cpu, mmu),
        0xcb34 => op_0xcb34(arg, cpu, mmu),
        0xcb35 => op_0xcb35(arg, cpu, mmu),
        0xcb36 => op_0xcb36(arg, cpu, mmu),
        0xcb37 => op_0xcb37(arg, cpu, mmu),
        0xcb38 => op_0xcb38(arg, cpu, mmu),
        0xcb39 => op_0xcb39(arg, cpu, mmu),
        0xcb3A => op_0xcb3a(arg, cpu, mmu),
        0xcb3B => op_0xcb3b(arg, cpu, mmu),
        0xcb3C => op_0xcb3c(arg, cpu, mmu),
        0xcb3D => op_0xcb3d(arg, cpu, mmu),
        0xcb3E => op_0xcb3e(arg, cpu, mmu),
        0xcb3F => op_0xcb3f(arg, cpu, mmu),
        0xcb40 => op_0xcb40(arg, cpu, mmu),
        0xcb41 => op_0xcb41(arg, cpu, mmu),
        0xcb42 => op_0xcb42(arg, cpu, mmu),
        0xcb43 => op_0xcb43(arg, cpu, mmu),
        0xcb44 => op_0xcb44(arg, cpu, mmu),
        0xcb45 => op_0xcb45(arg, cpu, mmu),
        0xcb46 => op_0xcb46(arg, cpu, mmu),
        0xcb47 => op_0xcb47(arg, cpu, mmu),
        0xcb48 => op_0xcb48(arg, cpu, mmu),
        0xcb49 => op_0xcb49(arg, cpu, mmu),
        0xcb4A => op_0xcb4a(arg, cpu, mmu),
        0xcb4B => op_0xcb4b(arg, cpu, mmu),
        0xcb4C => op_0xcb4c(arg, cpu, mmu),
        0xcb4D => op_0xcb4d(arg, cpu, mmu),
        0xcb4E => op_0xcb4e(arg, cpu, mmu),
        0xcb4F => op_0xcb4f(arg, cpu, mmu),
        0xcb50 => op_0xcb50(arg, cpu, mmu),
        0xcb51 => op_0xcb51(arg, cpu, mmu),
        0xcb52 => op_0xcb52(arg, cpu, mmu),
        0xcb53 => op_0xcb53(arg, cpu, mmu),
        0xcb54 => op_0xcb54(arg, cpu, mmu),
        0xcb55 => op_0xcb55(arg, cpu, mmu),
        0xcb56 => op_0xcb56(arg, cpu, mmu),
        0xcb57 => op_0xcb57(arg, cpu, mmu),
        0xcb58 => op_0xcb58(arg, cpu, mmu),
        0xcb59 => op_0xcb59(arg, cpu, mmu),
        0xcb5A => op_0xcb5a(arg, cpu, mmu),
        0xcb5B => op_0xcb5b(arg, cpu, mmu),
        0xcb5C => op_0xcb5c(arg, cpu, mmu),
        0xcb5D => op_0xcb5d(arg, cpu, mmu),
        0xcb5E => op_0xcb5e(arg, cpu, mmu),
        0xcb5F => op_0xcb5f(arg, cpu, mmu),
        0xcb60 => op_0xcb60(arg, cpu, mmu),
        0xcb61 => op_0xcb61(arg, cpu, mmu),
        0xcb62 => op_0xcb62(arg, cpu, mmu),
        0xcb63 => op_0xcb63(arg, cpu, mmu),
        0xcb64 => op_0xcb64(arg, cpu, mmu),
        0xcb65 => op_0xcb65(arg, cpu, mmu),
        0xcb66 => op_0xcb66(arg, cpu, mmu),
        0xcb67 => op_0xcb67(arg, cpu, mmu),
        0xcb68 => op_0xcb68(arg, cpu, mmu),
        0xcb69 => op_0xcb69(arg, cpu, mmu),
        0xcb6A => op_0xcb6a(arg, cpu, mmu),
        0xcb6B => op_0xcb6b(arg, cpu, mmu),
        0xcb6C => op_0xcb6c(arg, cpu, mmu),
        0xcb6D => op_0xcb6d(arg, cpu, mmu),
        0xcb6E => op_0xcb6e(arg, cpu, mmu),
        0xcb6F => op_0xcb6f(arg, cpu, mmu),
        0xcb70 => op_0xcb70(arg, cpu, mmu),
        0xcb71 => op_0xcb71(arg, cpu, mmu),
        0xcb72 => op_0xcb72(arg, cpu, mmu),
        0xcb73 => op_0xcb73(arg, cpu, mmu),
        0xcb74 => op_0xcb74(arg, cpu, mmu),
        0xcb75 => op_0xcb75(arg, cpu, mmu),
        0xcb76 => op_0xcb76(arg, cpu, mmu),
        0xcb77 => op_0xcb77(arg, cpu, mmu),
        0xcb78 => op_0xcb78(arg, cpu, mmu),
        0xcb79 => op_0xcb79(arg, cpu, mmu),
        0xcb7A => op_0xcb7a(arg, cpu, mmu),
        0xcb7B => op_0xcb7b(arg, cpu, mmu),
        0xcb7C => op_0xcb7c(arg, cpu, mmu),
        0xcb7D => op_0xcb7d(arg, cpu, mmu),
        0xcb7E => op_0xcb7e(arg, cpu, mmu),
        0xcb7F => op_0xcb7f(arg, cpu, mmu),
        0xcb80 => op_0xcb80(arg, cpu, mmu),
        0xcb81 => op_0xcb81(arg, cpu, mmu),
        0xcb82 => op_0xcb82(arg, cpu, mmu),
        0xcb83 => op_0xcb83(arg, cpu, mmu),
        0xcb84 => op_0xcb84(arg, cpu, mmu),
        0xcb85 => op_0xcb85(arg, cpu, mmu),
        0xcb86 => op_0xcb86(arg, cpu, mmu),
        0xcb87 => op_0xcb87(arg, cpu, mmu),
        0xcb88 => op_0xcb88(arg, cpu, mmu),
        0xcb89 => op_0xcb89(arg, cpu, mmu),
        0xcb8A => op_0xcb8a(arg, cpu, mmu),
        0xcb8B => op_0xcb8b(arg, cpu, mmu),
        0xcb8C => op_0xcb8c(arg, cpu, mmu),
        0xcb8D => op_0xcb8d(arg, cpu, mmu),
        0xcb8E => op_0xcb8e(arg, cpu, mmu),
        0xcb8F => op_0xcb8f(arg, cpu, mmu),
        0xcb90 => op_0xcb90(arg, cpu, mmu),
        0xcb91 => op_0xcb91(arg, cpu, mmu),
        0xcb92 => op_0xcb92(arg, cpu, mmu),
        0xcb93 => op_0xcb93(arg, cpu, mmu),
        0xcb94 => op_0xcb94(arg, cpu, mmu),
        0xcb95 => op_0xcb95(arg, cpu, mmu),
        0xcb96 => op_0xcb96(arg, cpu, mmu),
        0xcb97 => op_0xcb97(arg, cpu, mmu),
        0xcb98 => op_0xcb98(arg, cpu, mmu),
        0xcb99 => op_0xcb99(arg, cpu, mmu),
        0xcb9A => op_0xcb9a(arg, cpu, mmu),
        0xcb9B => op_0xcb9b(arg, cpu, mmu),
        0xcb9C => op_0xcb9c(arg, cpu, mmu),
        0xcb9D => op_0xcb9d(arg, cpu, mmu),
        0xcb9E => op_0xcb9e(arg, cpu, mmu),
        0xcb9F => op_0xcb9f(arg, cpu, mmu),
        0xcbA0 => op_0xcba0(arg, cpu, mmu),
        0xcbA1 => op_0xcba1(arg, cpu, mmu),
        0xcbA2 => op_0xcba2(arg, cpu, mmu),
        0xcbA3 => op_0xcba3(arg, cpu, mmu),
        0xcbA4 => op_0xcba4(arg, cpu, mmu),
        0xcbA5 => op_0xcba5(arg, cpu, mmu),
        0xcbA6 => op_0xcba6(arg, cpu, mmu),
        0xcbA7 => op_0xcba7(arg, cpu, mmu),
        0xcbA8 => op_0xcba8(arg, cpu, mmu),
        0xcbA9 => op_0xcba9(arg, cpu, mmu),
        0xcbAA => op_0xcbaa(arg, cpu, mmu),
        0xcbAB => op_0xcbab(arg, cpu, mmu),
        0xcbAC => op_0xcbac(arg, cpu, mmu),
        0xcbAD => op_0xcbad(arg, cpu, mmu),
        0xcbAE => op_0xcbae(arg, cpu, mmu),
        0xcbAF => op_0xcbaf(arg, cpu, mmu),
        0xcbB0 => op_0xcbb0(arg, cpu, mmu),
        0xcbB1 => op_0xcbb1(arg, cpu, mmu),
        0xcbB2 => op_0xcbb2(arg, cpu, mmu),
        0xcbB3 => op_0xcbb3(arg, cpu, mmu),
        0xcbB4 => op_0xcbb4(arg, cpu, mmu),
        0xcbB5 => op_0xcbb5(arg, cpu, mmu),
        0xcbB6 => op_0xcbb6(arg, cpu, mmu),
        0xcbB7 => op_0xcbb7(arg, cpu, mmu),
        0xcbB8 => op_0xcbb8(arg, cpu, mmu),
        0xcbB9 => op_0xcbb9(arg, cpu, mmu),
        0xcbBA => op_0xcbba(arg, cpu, mmu),
        0xcbBB => op_0xcbbb(arg, cpu, mmu),
        0xcbBC => op_0xcbbc(arg, cpu, mmu),
        0xcbBD => op_0xcbbd(arg, cpu, mmu),
        0xcbBE => op_0xcbbe(arg, cpu, mmu),
        0xcbBF => op_0xcbbf(arg, cpu, mmu),
        0xcbC0 => op_0xcbc0(arg, cpu, mmu),
        0xcbC1 => op_0xcbc1(arg, cpu, mmu),
        0xcbC2 => op_0xcbc2(arg, cpu, mmu),
        0xcbC3 => op_0xcbc3(arg, cpu, mmu),
        0xcbC4 => op_0xcbc4(arg, cpu, mmu),
        0xcbC5 => op_0xcbc5(arg, cpu, mmu),
        0xcbC6 => op_0xcbc6(arg, cpu, mmu),
        0xcbC7 => op_0xcbc7(arg, cpu, mmu),
        0xcbC8 => op_0xcbc8(arg, cpu, mmu),
        0xcbC9 => op_0xcbc9(arg, cpu, mmu),
        0xcbCA => op_0xcbca(arg, cpu, mmu),
        0xcbCB => op_0xcbcb(arg, cpu, mmu),
        0xcbCC => op_0xcbcc(arg, cpu, mmu),
        0xcbCD => op_0xcbcd(arg, cpu, mmu),
        0xcbCE => op_0xcbce(arg, cpu, mmu),
        0xcbCF => op_0xcbcf(arg, cpu, mmu),
        0xcbD0 => op_0xcbd0(arg, cpu, mmu),
        0xcbD1 => op_0xcbd1(arg, cpu, mmu),
        0xcbD2 => op_0xcbd2(arg, cpu, mmu),
        0xcbD3 => op_0xcbd3(arg, cpu, mmu),
        0xcbD4 => op_0xcbd4(arg, cpu, mmu),
        0xcbD5 => op_0xcbd5(arg, cpu, mmu),
        0xcbD6 => op_0xcbd6(arg, cpu, mmu),
        0xcbD7 => op_0xcbd7(arg, cpu, mmu),
        0xcbD8 => op_0xcbd8(arg, cpu, mmu),
        0xcbD9 => op_0xcbd9(arg, cpu, mmu),
        0xcbDA => op_0xcbda(arg, cpu, mmu),
        0xcbDB => op_0xcbdb(arg, cpu, mmu),
        0xcbDC => op_0xcbdc(arg, cpu, mmu),
        0xcbDD => op_0xcbdd(arg, cpu, mmu),
        0xcbDE => op_0xcbde(arg, cpu, mmu),
        0xcbDF => op_0xcbdf(arg, cpu, mmu),
        0xcbE0 => op_0xcbe0(arg, cpu, mmu),
        0xcbE1 => op_0xcbe1(arg, cpu, mmu),
        0xcbE2 => op_0xcbe2(arg, cpu, mmu),
        0xcbE3 => op_0xcbe3(arg, cpu, mmu),
        0xcbE4 => op_0xcbe4(arg, cpu, mmu),
        0xcbE5 => op_0xcbe5(arg, cpu, mmu),
        0xcbE6 => op_0xcbe6(arg, cpu, mmu),
        0xcbE7 => op_0xcbe7(arg, cpu, mmu),
        0xcbE8 => op_0xcbe8(arg, cpu, mmu),
        0xcbE9 => op_0xcbe9(arg, cpu, mmu),
        0xcbEA => op_0xcbea(arg, cpu, mmu),
        0xcbEB => op_0xcbeb(arg, cpu, mmu),
        0xcbEC => op_0xcbec(arg, cpu, mmu),
        0xcbED => op_0xcbed(arg, cpu, mmu),
        0xcbEE => op_0xcbee(arg, cpu, mmu),
        0xcbEF => op_0xcbef(arg, cpu, mmu),
        0xcbF0 => op_0xcbf0(arg, cpu, mmu),
        0xcbF1 => op_0xcbf1(arg, cpu, mmu),
        0xcbF2 => op_0xcbf2(arg, cpu, mmu),
        0xcbF3 => op_0xcbf3(arg, cpu, mmu),
        0xcbF4 => op_0xcbf4(arg, cpu, mmu),
        0xcbF5 => op_0xcbf5(arg, cpu, mmu),
        0xcbF6 => op_0xcbf6(arg, cpu, mmu),
        0xcbF7 => op_0xcbf7(arg, cpu, mmu),
        0xcbF8 => op_0xcbf8(arg, cpu, mmu),
        0xcbF9 => op_0xcbf9(arg, cpu, mmu),
        0xcbFA => op_0xcbfa(arg, cpu, mmu),
        0xcbFB => op_0xcbfb(arg, cpu, mmu),
        0xcbFC => op_0xcbfc(arg, cpu, mmu),
        0xcbFD => op_0xcbfd(arg, cpu, mmu),
        0xcbFE => op_0xcbfe(arg, cpu, mmu),
        0xcbFF => op_0xcbff(arg, cpu, mmu),
        _ => panic!("Invalid opcode: {:04x}: {:04x}", cpu.get_pc(), code),
    }
}
